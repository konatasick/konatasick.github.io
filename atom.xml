<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Konata Tech Blog</title>
  
  <subtitle>No bug no life!</subtitle>
  <link href="https://tech.konata.co/atom.xml" rel="self"/>
  
  <link href="https://tech.konata.co/"/>
  <updated>2022-03-16T12:43:31.106Z</updated>
  <id>https://tech.konata.co/</id>
  
  <author>
    <name>Konata Izumi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mastodon | 以 local-only 代码合并为例浅谈如何合并特定commit</title>
    <link href="https://tech.konata.co/2022-03-16-local-only/"/>
    <id>https://tech.konata.co/2022-03-16-local-only/</id>
    <published>2022-03-16T12:43:31.000Z</published>
    <updated>2022-03-16T12:43:31.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文会尽我可能解释涉及到的所有概念，但还是推荐有一定的 git 使用基础后阅读。推荐阅读的前置内容：<a href="https://pullopen.github.io/%E8%BF%9B%E9%98%B6%E9%AD%94%E6%94%B9/2020/11/01/Mastodon-on-Docker-2.html">《如何利用Docker搭建Mastodon实例（二）：进阶魔改篇》</a> 的升级章节。</p><p>最初是有一位大神写了Local-only的功能，可以让嘟文限制在本实例而不流出外部。此 <a href="https://github.com/mastodon/mastodon/pull/8427">pr</a> 并没有被官方采纳，但是一些站点都有增加这个魔改功能。</p><p>本篇以我的 <a href="https://github.com/retirenow/mastodon/commit/8ca207b9e3b45fc4e3962385572bd37e243c3e36">local-only commit</a> 为例，说明如何合并这种代码量较大的魔改（代码量小的通常找到位置复制粘贴即可，参考文章开头的<a href="https://pullopen.github.io/%E8%BF%9B%E9%98%B6%E9%AD%94%E6%94%B9/2020/11/01/Mastodon-on-Docker-2.html">教程</a> ）。</p><p>请将全文阅读完后再开始操作，因为你需要先看处理冲突后是否 debug 来决定在哪里进行合并代码的操作。</p><h2 id="从远程仓库拉取代码"><a href="#从远程仓库拉取代码" class="headerlink" title="从远程仓库拉取代码"></a>从远程仓库拉取代码</h2><p>首先将<strong>你的</strong>代码仓库 <code>git clone</code> 到本地，或直接 <code>cd</code> 到已有的仓库目录，并查看目前的分支连接情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/yourname/mastodon.git </span><br><span class="line">$ cd mastodon</span><br></pre></td></tr></table></figure><p>此时如果查看远程连接情况，只会看到一个名为 <code>origin</code> 的远程仓库链接，也就是你自己的远程仓库的名字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  https://github.com/yourname/mastodon.git (fetch)</span><br><span class="line">origin  https://github.com/yourname/mastodon.git (push)</span><br></pre></td></tr></table></figure><p>此时如果查看分支情况，一般而言默认是只 <code>clone</code> 了 <code>main</code> 分支（即 <code>origin/main</code>）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -vv</span><br><span class="line">* main 4bdce2c51 [origin/main] 你最新的 commit 内容 (#17618)</span><br></pre></td></tr></table></figure><h3 id="（可选）创建一个专门用于处理此次合并的分支"><a href="#（可选）创建一个专门用于处理此次合并的分支" class="headerlink" title="（可选）创建一个专门用于处理此次合并的分支"></a>（可选）创建一个专门用于处理此次合并的分支</h3><p>如果你熟悉 <code>git</code> 的分支管理，此时可以新建一个专门的分支，最后再并入主干，本文采取直接合入主干的方式，故这部分不展开讲。</p><h2 id="设置远程仓库连接"><a href="#设置远程仓库连接" class="headerlink" title="设置远程仓库连接"></a>设置远程仓库连接</h2><p>一个基础的 <code>git</code> 概念是，在本地的这个是你的本地代码仓库，而 GitHub 只是代码的远程托管，本地和远程仓库可以理解为一个仓库的两个副本，你可以把你的代码发送给远程仓库，也可以从远程仓库拉取，而且一个本地仓库可以连接不止一个远程仓库。</p><p>现在添加这个 <a href="https://github.com/retirenow/mastodon.git">local-only 的仓库</a> 作为 <code>upstream</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https://github.com/retirenow/mastodon.git</span><br></pre></td></tr></table></figure><p>此时再查看远程连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  https://github.com/yourname/mastodon.git (fetch)</span><br><span class="line">origin  https://github.com/yourname/mastodon.git (push)</span><br><span class="line">upstream        https://github.com/retirenow/mastodon.git (fetch)</span><br><span class="line">upstream        https://github.com/retirenow/mastodon.git (push)</span><br></pre></td></tr></table></figure><p>就会有两个远程，名字分别为 <code>origin</code> 和 <code>upstream</code>。</p><h2 id="拉取分支并合并代码"><a href="#拉取分支并合并代码" class="headerlink" title="拉取分支并合并代码"></a>拉取分支并合并代码</h2><p>设置好远程以后，我们就可以从 <code>upstream</code> 拉取含有 local-only 的分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream main:instance_only_statuses</span><br></pre></td></tr></table></figure><p>这边因为分支都叫 <code>main</code>，为了区分我给从 <code>upstream</code> 拉取的本地分支重命名了一下。上面这句话的意思是，从 <code>upstream</code> 拉取它的 <code>main</code> 分支，并命名为本地的 <code>instance_only_statuses</code>。</p><p>这时候查看分支情况，会有两个分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -vv</span><br><span class="line">  instance_only_statuses d8c03d962 retirenow 最新的 commit 内容</span><br><span class="line">* main                   4bdce2c51 [origin/main] 你最新的 commit 内容 (#17618)</span><br></pre></td></tr></table></figure><p>星号代表你现在处于 <code>main</code> 分支上。</p><p>现在cherry-pick这个commit：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick 8ca207b9e3b45fc4e3962385572bd37e243c3e36</span><br></pre></td></tr></table></figure><p>那一长串编码是这个 <code>commit</code> 的哈希值，可以唯一指定找到这串 <code>commit</code> ，可以在 <code>commit</code> 页面找到：<br><img src="https://s2.loli.net/2022/03/16/iXBq4wMYpsR2mZa.png"></p><p><code>cherry-pick</code> 用于只合并特定 <code>commit</code> ，和 <code>merge</code> 类似，<code>merge</code> 是合并两个分支（包含所有 <code>commit</code>）。</p><h2 id="处理冲突"><a href="#处理冲突" class="headerlink" title="处理冲突"></a>处理冲突</h2><p>在 <code>cherry-pick</code> 之后，如此大的改动量通常会提示代码有冲突，推荐用 <a href="https://tech.konata.co/2022-02-26-anaconda-vscode/">vscode</a> 处理。</p><p>从侧边的 <code>git</code> 点进去看：</p><p><img src="https://s2.loli.net/2022/03/16/fOcUHQFNBJW8LVw.png"></p><p>其中暂存的更改（Staged Changes）就是已经被自动合并好的代码，不需要处理，而合并更改（Merge Changes）则是需要处理的冲突文件，具体数量因人而异。</p><p>点开合并更改中一个文件，在冲突的地方，会有如下所示：<br><img src="https://s2.loli.net/2022/03/16/aRDdFfQykV3qzXL.png"></p><p>Accept Current Change 是保持现在（main分支）的代码，Accept Incomming Change 是用local-only的代码，Accept Both Changes 则是保留两者。</p><p>这里的处理其实需要一点灵性和连蒙带猜，可以结合<a href="https://github.com/mastodon/mastodon/pull/8427/files">原始pr的file change</a>理解一下它增加代码的逻辑然后去选择如何更改。以上图为例，显然是因为我们main分支增加了一个叫”ordered_media_attachment_ids”的东西，而 local only 也增加了”local_only”，所以我们的选择就是 Accept Both Changes。</p><h2 id="处理完冲突后"><a href="#处理完冲突后" class="headerlink" title="处理完冲突后"></a>处理完冲突后</h2><p>一般而言，如果你是参考<a href="https://pullopen.github.io/%E8%BF%9B%E9%98%B6%E9%AD%94%E6%94%B9/2020/11/01/Mastodon-on-Docker-2.html">这个教程</a> 进行代码魔改，此时你只需要提交你的改动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;local-only&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>然后静待 GitHub 编译好镜像，你再拉取使用即可。</p><p>我在这一步遇到了报错500，参考<a href="https://blog.tantalum.life/posts/how-to-run-your-mastodon-by-docker/#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%82%E5%BA%94">这篇文章</a><br>对数据库进行 migrate 再重启即可。</p><h3 id="在-docker-container-中-debug"><a href="#在-docker-container-中-debug" class="headerlink" title="在 docker container 中 debug"></a>在 docker container 中 debug</h3><p>但是通常来说如此大的代码改动量，有一定风险不能一次性跑通，如果直接使用镜像遇到问题，我推荐参考<a href="https://tech.konata.co/2022-02-23-mastodon-debug-in-container/">《Docker 部署的 mastodon 在容器内 debug》</a>。或者如果不放心也可以先在容器内部编译通过再拉取镜像。</p><p>首先进入 docker container:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec --user root -it mastodon_web_1 /bin/bash</span><br></pre></td></tr></table></figure><p>容器里默认是没有 <code>git</code> 的，需要先安装 <code>git</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><p>这时候可能会遇到报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E: Archives directory /var/cache/apt/archives/partial is missing</span><br></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/cache/apt/archive/partial</span><br></pre></td></tr></table></figure><p>继续：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><p>即可正确安装。</p><p>进入到我们的代码目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /mastodon</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>然后添加你的远程仓库并拉取最新的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/yourname/mastodon.git</span><br><span class="line">git fetch origin main:main</span><br><span class="line">git checkout -f main</span><br></pre></td></tr></table></figure><p>也可以一开始就直接在 docker container 里合代码，如果你会用 vscode 连接 docker container，原理都是一样的。</p><p>接下来 precompile:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RAILS_ENV=production bundle exec rails assets:precompile</span><br></pre></td></tr></table></figure><p>通过后退出并 <code>docker-compose restart</code>，就可以直接在网页上预览效果了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文会尽我可能解释涉及到的所有概念，但还是推荐有一定的 git 使用基础后阅读。推荐阅读的前置内容：&lt;a href=&quot;https://pul</summary>
      
    
    
    
    <category term="Project" scheme="https://tech.konata.co/categories/Project/"/>
    
    
    <category term="mastodon" scheme="https://tech.konata.co/tags/mastodon/"/>
    
    <category term="git" scheme="https://tech.konata.co/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下配置 Anaconda3 + vscode 基础环境</title>
    <link href="https://tech.konata.co/2022-02-26-anaconda-vscode/"/>
    <id>https://tech.konata.co/2022-02-26-anaconda-vscode/</id>
    <published>2022-02-26T11:23:16.000Z</published>
    <updated>2022-02-26T16:18:58.336Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一个<a href="https://tech.konata.co/2020-01-16-vscode/">vscode安利帖</a>，最近因为重新配置环境，顺便把更基础的部分补充一下。</p><h2 id="安装必要软件"><a href="#安装必要软件" class="headerlink" title="安装必要软件"></a>安装必要软件</h2><h3 id="Anaconda3"><a href="#Anaconda3" class="headerlink" title="Anaconda3"></a>Anaconda3</h3><p>在<a href="https://www.anaconda.com/products/individual">官网</a>下载，安装时勾选<code>add anaconda3 to my PATH enviroment variable</code>。</p><h3 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h3><p>在<a href="https://code.visualstudio.com/">官网</a>下载，安装时勾选<code>添加到PATH</code>，重启使其生效。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>在<a href="https://git-scm.com/downloads">官网</a>下载，并配置好个人信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>在<a href="https://www.docker.com/get-started">官网</a>下载。</p><p>下载重启后，打开docker，通常会报错：WSL 2 installation is incomplete，并给出一个下载链接，点进去以后下载一个msi然后安装即可。</p><h2 id="配置-VScode"><a href="#配置-VScode" class="headerlink" title="配置 VScode"></a>配置 VScode</h2><p>重启电脑，打开 vscode，下载 python 插件，有需要可以改成中文，参考<a href="https://tech.konata.co/2020-01-16-vscode/">vscode安利帖</a>。</p><p>在 vscode 的菜单中选择：Terminal-new terminal</p><p>在出现的终端界面右边选择默认terminal为cmd（重要）：</p><p><img src="https://s2.loli.net/2022/02/26/w2T56gV8CrDHzne.png"><br>再点+出现新的cmd命令窗口，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Conda activate base</span><br></pre></td></tr></table></figure><p>激活conda，如果最左边有个（base）说明成功了。</p><p>另外我的 vscode 出现画面很糊的诡异情况，这时候去快捷方式的目录，右键快捷方式，选择属性，在目标中增加一个 <code>--disable-gpu</code> 参数，如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Microsoft VS Code\Code.exe&quot; --disable-gpu</span><br></pre></td></tr></table></figure><h2 id="配置清华镜像"><a href="#配置清华镜像" class="headerlink" title="配置清华镜像"></a>配置清华镜像</h2><p>如果 conda 和 pip 太慢，可以配置清华镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --setshow_channel_urls yes</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U </span><br><span class="line">Pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前写过一个&lt;a href=&quot;https://tech.konata.co/2020-01-16-vscode/&quot;&gt;vscode安利帖&lt;/a&gt;，最近因为重新配置环境，顺便把更基础的部分补充一下。&lt;/p&gt;
&lt;h2 id=&quot;安装必要软件&quot;&gt;&lt;a href=&quot;#安装必要软件&quot; c</summary>
      
    
    
    
    <category term="Workshop" scheme="https://tech.konata.co/categories/Workshop/"/>
    
    
    <category term="python" scheme="https://tech.konata.co/tags/python/"/>
    
    <category term="vscode" scheme="https://tech.konata.co/tags/vscode/"/>
    
    <category term="Anaconda3" scheme="https://tech.konata.co/tags/Anaconda3/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署的 mastodon 在容器内 debug</title>
    <link href="https://tech.konata.co/2022-02-23-mastodon-debug-in-container/"/>
    <id>https://tech.konata.co/2022-02-23-mastodon-debug-in-container/</id>
    <published>2022-02-23T05:54:28.000Z</published>
    <updated>2022-02-27T08:00:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>TL; DR:</p><p>进入container改代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mastodon_web_1 /bin/bash </span><br></pre></td></tr></table></figure><p>预编译确保不报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RAILS_ENV=production bundle exec rails assets:precompile</span><br></pre></td></tr></table></figure><p>退出并重启容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><p>感谢小柠檬 @<a href="mailto:&#108;&#101;&#x6d;&#111;&#110;&#64;&#x6e;&#x79;&#97;&#46;&#x6c;&#x65;&#x6d;&#111;&#x6e;&#x61;&#x64;&#x65;&#x2e;&#109;&#x6f;&#101;">&#108;&#101;&#x6d;&#111;&#110;&#64;&#x6e;&#x79;&#97;&#46;&#x6c;&#x65;&#x6d;&#111;&#x6e;&#x61;&#x64;&#x65;&#x2e;&#109;&#x6f;&#101;</a> 用自己的实例测试研究出这套可行方案！</p><h2 id="非docker的魔改方法"><a href="#非docker的魔改方法" class="headerlink" title="非docker的魔改方法"></a>非docker的魔改方法</h2><p>可参考这篇文章：<a href="https://pullopen.github.io/%E8%BF%9B%E9%98%B6%E9%AD%94%E6%94%B9/2020/11/14/mastodon-modify.html">进阶魔改：修改字数上限、媒体上限、投票上限、添加自定义主题、界面用语、非登陆用户有限显示，附阻止本站嘟文流入某站点方法</a></p><p>一般的修改逻辑是：</p><ul><li>修改对应代码</li><li>预编译</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RAILS_ENV=production bundle exec rails assets:precompile</span><br></pre></td></tr></table></figure><ul><li>重启服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mastodon-sidekiq</span><br><span class="line">systemctl reload mastodon-web</span><br><span class="line">systemctl restart mastodon-streaming</span><br></pre></td></tr></table></figure><h2 id="docker-魔改方法"><a href="#docker-魔改方法" class="headerlink" title="docker 魔改方法"></a>docker 魔改方法</h2><p>参考这篇文章：<a href="https://pullopen.github.io/%E8%BF%9B%E9%98%B6%E9%AD%94%E6%94%B9/2020/11/01/Mastodon-on-Docker-2.html">如何利用Docker搭建Mastodon实例（二）：进阶魔改篇</a></p><p>在其中的“如何在Docker上保留你的魔改”部分，提到了三种方法：</p><ol><li>进入容器修改；</li><li>用<code>docker-compose build</code>本地编译；</li><li>利用GitHub编译镜像，直接拉取最新镜像后重启。</li></ol><p>对于较为简单的改动，第三种方法已经够用，但有时候我们需要对改动进行调试，以确保网站按照我们预想的效果运行，此时如果每次改动代码都要走提交-编译镜像-拉取镜像-重启的流程，调试起来就会非常不方便。本文就提供了第一种方法的补充，进入容器修改代码并实时生效。</p><p>建议的workflow是：</p><ul><li>进入容器修改代码并确保调试完成</li><li>在容器外修改代码并走传镜像的流程进行正式更新</li></ul><h3 id="在容器内debug"><a href="#在容器内debug" class="headerlink" title="在容器内debug"></a>在容器内debug</h3><p>先进入容器，如果是按照官方的docker-compose.yml，容器名应该是<code>mastodon_web_1</code>，可用<code>docker ps</code>确认：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mastodon_web_1 /bin/bash </span><br></pre></td></tr></table></figure><p>进入container改代码，然后预编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RAILS_ENV=production bundle exec rails assets:precompile</span><br></pre></td></tr></table></figure><p>这步不报错之后exit退出，然后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><p>即可在站点实时看到效果。</p><p>本方法适合进入docker进行一些调试并且可以快速在网页端看到修改结果，确认无误后还是推荐打包成镜像再<code>docker-compose down/up -d</code>，参考下文。</p><h3 id="利用GitHub编译镜像"><a href="#利用GitHub编译镜像" class="headerlink" title="利用GitHub编译镜像"></a>利用GitHub编译镜像</h3><p>参考这篇文章：<a href="https://pullopen.github.io/%E8%BF%9B%E9%98%B6%E9%AD%94%E6%94%B9/2020/11/01/Mastodon-on-Docker-2.html">如何利用Docker搭建Mastodon实例（二）：进阶魔改篇</a></p><p>如果有500之类的报错可以参考：<a href="https://blog.tantalum.life/posts/how-to-run-your-mastodon-by-docker/#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%82%E5%BA%94">数据库适应</a></p><p>对数据进行migrate，之后需要再重新<code>docker-compose down/up -d</code>一次，即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm web rails db:migrate</span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TL; DR:&lt;/p&gt;
&lt;p&gt;进入container改代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="Project" scheme="https://tech.konata.co/categories/Project/"/>
    
    
    <category term="Mastodon" scheme="https://tech.konata.co/tags/Mastodon/"/>
    
    <category term="Docker" scheme="https://tech.konata.co/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Crontab 各种运行不成功和解决方法</title>
    <link href="https://tech.konata.co/2022-02-22-crontab-debug/"/>
    <id>https://tech.konata.co/2022-02-22-crontab-debug/</id>
    <published>2022-02-21T17:37:15.000Z</published>
    <updated>2022-02-21T17:49:35.557Z</updated>
    
    <content type="html"><![CDATA[<p>Crontab是一个运行定时脚本的工具，我在这里翻车了n次，记录一下debug过程。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service cron status # 查看运行状态和报错信息</span><br><span class="line">service cron reload # 重新载入 </span><br><span class="line">service cron restart # 重启</span><br><span class="line">vim /etc/crontab #编辑 crontab</span><br></pre></td></tr></table></figure><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><h3 id="Missing-newline-before-EOF"><a href="#Missing-newline-before-EOF" class="headerlink" title="Missing newline before EOF"></a>Missing newline before EOF</h3><p>报错内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*system*) ERROR (Missing newline before EOF, this crontab file will be ignored)</span><br></pre></td></tr></table></figure><p><a href="https://cronitor.io/cron-reference/missing-newline-before-eof#:~:text=Fixing%20missing%20newline%20before%20EOF%20errors.%20Correct%20this,always%20added%20and%20are%20not%20%20incorrectly%20stripped.">解决方案</a></p><blockquote><p>Correct this error simply by <strong>adding a blank line</strong> at the end of your crontab. </p></blockquote><p>就是在crontab文件的末尾添加一个新的空行（回车），就离谱……</p><h3 id="session-opened-for-user-root-by-uid-x3D-0"><a href="#session-opened-for-user-root-by-uid-x3D-0" class="headerlink" title="session opened for user root by (uid&#x3D;0)"></a>session opened for user root by (uid&#x3D;0)</h3><p>报错内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pam_unix(cron:session): session opened for user root by (uid=0)</span><br></pre></td></tr></table></figure><p><a href="https://www.digitalocean.com/community/questions/weird-cron-logs-appearing-for-no-reasion">解决方案</a>：</p><p>打开文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pam.d/common-session-noninteractive</span><br></pre></td></tr></table></figure><p>找到这一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session required pam_unix.so</span><br></pre></td></tr></table></figure><p>并在其上方添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session [success=1 default=ignore] pam_succeed_if.so service in cron quiet use_uid</span><br></pre></td></tr></table></figure><p>然后重启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service cron restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Crontab是一个运行定时脚本的工具，我在这里翻车了n次，记录一下debug过程。&lt;/p&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="Workshop" scheme="https://tech.konata.co/categories/Workshop/"/>
    
    
    <category term="Docker" scheme="https://tech.konata.co/tags/Docker/"/>
    
    <category term="Crontab" scheme="https://tech.konata.co/tags/Crontab/"/>
    
    <category term="Linux" scheme="https://tech.konata.co/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>给 Hexo 配置 Giscus 评论系统</title>
    <link href="https://tech.konata.co/2022-02-20-add-comment-to-hexo/"/>
    <id>https://tech.konata.co/2022-02-20-add-comment-to-hexo/</id>
    <published>2022-02-20T10:14:45.000Z</published>
    <updated>2022-02-20T10:14:45.143Z</updated>
    
    <content type="html"><![CDATA[<p>在网上看到别人家的博客有GitHub登陆评论的功能，立刻表示：“我也要！”</p><p>一开始使用的是next自带的gitalk设置，然而在我的一番努力下依然没有配好，于是换成了Giscus，参考<a href="https://blog.southfox.me/2022/01/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%94%AF%E6%8C%81%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">Giscus的优点</a>。</p><p>Giscus的配置非常简单！按照上文的顺序配好了以后，卡在最后一步“嵌入到博客文章模板底部”，于是搜到了<a href="https://github.com/next-theme/hexo-next-giscus">这个插件</a>，安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-next-giscus --save</span><br></pre></td></tr></table></figure><p>然后在 hexo 的 _config.yml 添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">giscus:</span><br><span class="line">  enable: false</span><br><span class="line">  repo: # Github repository name</span><br><span class="line">  repo_id: # Github repository id</span><br><span class="line">  category: # Github discussion category</span><br><span class="line">  category_id: # Github discussion category id</span><br><span class="line">  # Available values: pathname | url | title | og:title</span><br><span class="line">  mapping: pathname</span><br><span class="line">  # Available values: 0 | 1 </span><br><span class="line">  reactions_enabled: 1</span><br><span class="line">   # Available values: 0 | 1 </span><br><span class="line">  emit_metadata: 1</span><br><span class="line">  # Available values: light | dark | dark_high_contrast | transparent_dark | preferred-color-scheme</span><br><span class="line">  theme: light</span><br><span class="line">  # Available values: en | zh-C</span><br><span class="line">  lang: en</span><br><span class="line">  # Available value: anonymous</span><br><span class="line">  crossorigin: anonymous</span><br></pre></td></tr></table></figure><p>把<code>enable: false</code>改为<code>true</code>，并参考<a href="https://giscus.app/zh-CN">Giscus</a>生成的脚本的元素依次填入设置。</p><p>一开始是在<code>_config.next.yml</code>不起作用，不知为何。</p><p>最后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>刷新页面后就可以看到评论页面啦！</p><p>快来给我评论吧～～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在网上看到别人家的博客有GitHub登陆评论的功能，立刻表示：“我也要！”&lt;/p&gt;
&lt;p&gt;一开始使用的是next自带的gitalk设置，然而在我的一番努力下依然没有配好，于是换成了Giscus，参考&lt;a href=&quot;https://blog.southfox.me/2022</summary>
      
    
    
    
    <category term="Project" scheme="https://tech.konata.co/categories/Project/"/>
    
    
    <category term="Hexo" scheme="https://tech.konata.co/tags/Hexo/"/>
    
    <category term="Next" scheme="https://tech.konata.co/tags/Next/"/>
    
    <category term="Giscus" scheme="https://tech.konata.co/tags/Giscus/"/>
    
  </entry>
  
  <entry>
    <title>Mastodon 媒体存储和数据库备份</title>
    <link href="https://tech.konata.co/2022-02-20-mastodon-backup/"/>
    <id>https://tech.konata.co/2022-02-20-mastodon-backup/</id>
    <published>2022-02-19T16:19:10.000Z</published>
    <updated>2022-02-27T07:48:13.676Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写在前面：</strong><br>本文备份方法我还在验证中，请谨慎使用，最好以防万一多导出一份<code>backup.dump</code> 。</p><h2 id="Why：为什么要备份"><a href="#Why：为什么要备份" class="headerlink" title="Why：为什么要备份"></a>Why：为什么要备份</h2><p>定期备份是好习惯，自从体验过一次wordpress搬家以后深刻感受到，有（异地）备份走遍天下都不怕。因为各种教备份的资料都比较全，本文主要是个人记录+学习用，如果想深入了解备份究竟在做什么也可以参考这篇文章。</p><p>当你有一份长毛象的异地备份，你可以：</p><ul><li>迁移站点到其他服务器</li><li>在服务器完全瘫痪时或不小心重装后，依然可以还原所有数据库内容</li></ul><h2 id="What：备份哪些内容"><a href="#What：备份哪些内容" class="headerlink" title="What：备份哪些内容"></a>What：备份哪些内容</h2><p>俗话说得好，没有经过检验的备份不是好备份。那么最快让我们清楚需要备份什么的方式就是看还原&#x2F;迁移站点需要什么。</p><p>这里参考了<a href="https://pullopen.github.io/%E7%AB%99%E7%82%B9%E7%BB%B4%E6%8A%A4/2020/10/21/migrate-Mastodon-to-Docker.html">非docker站点迁移到docker</a> 和 <a href="https://blog.tantalum.life/posts/migrate-mastodon-to-docker/">docker迁移到docker</a> 两篇资料，大致上分为三步：</p><h3 id="1-转移配置文件"><a href="#1-转移配置文件" class="headerlink" title="1. 转移配置文件"></a>1. 转移配置文件</h3><p>配置文件也就是你的mastodon安装目录（按照pullopen的教程的话应该是<code>/home/mastodon/mastodon</code>）下的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.env.production </span><br><span class="line">docker-compose.yml </span><br></pre></td></tr></table></figure><p>也就是在更改站点设置中最常用的两个文件。</p><h3 id="2-转移数据库"><a href="#2-转移数据库" class="headerlink" title="2. 转移数据库"></a>2. 转移数据库</h3><p>这里有两个方法：</p><ul><li><p>通过备份文件<code>backup.dump</code> 进行转移，也就是备份的最关键内容，通常通过<code>pg_dump</code>导出备份，再通过<code>pg_restore</code>进行还原。</p></li><li><p>如果是docker，可以直接复制<code>./postgres/</code>和<code>./redis/</code>，并对<code>./postgres/</code>赋权，参考<a href="https://pullopen.github.io/%E7%AB%99%E7%82%B9%E7%BB%B4%E6%8A%A4/2020/10/21/migrate-Mastodon-to-Docker.html">将站点从Docker迁移至Docker</a></p></li></ul><h3 id="3-转移媒体文件"><a href="#3-转移媒体文件" class="headerlink" title="3. 转移媒体文件"></a>3. 转移媒体文件</h3><p>这里分为两种情况，如果你已经配置了媒体文件在云存储，这一步是不需要的。如果你没有配置过，那么你的所有文件都在<code>./public/system/</code>目录下。具体而言有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd /home/mastodon/mastodon/public/system</span><br><span class="line">$ du -h --max-depth=1</span><br><span class="line">9.6M    ./media_attachments</span><br><span class="line">3.3G    ./cache</span><br><span class="line">20M     ./custom_emojis</span><br><span class="line">13M     ./accounts</span><br><span class="line">3.4G    .</span><br></pre></td></tr></table></figure><p>其中<code>./cache</code>是外站存储，其他都是本站的数据。我们当然希望除了外站存储以外，对本站的所有数据都做好备份。</p><p>关于定期清除外站存储，请参考<a href="https://moe.cat/@AstroProfundis/104527119128844099">这个嘟文</a>，我的crontab设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">30 4    * * *   root    docker exec mastodon_web_1 tootctl media remove --days=14 &gt;&gt; /home/mastodon/log/mastodon/all.log 2&gt;&amp;1</span><br><span class="line">30 4    * * *   root    docker exec mastodon_web_1 tootctl media remove-orphans &gt;&gt; /home/mastodon/log/mastodon/all.log 2&gt;&amp;1</span><br><span class="line">30 4    * * *   root    docker exec mastodon_web_1 tootctl statuses remove --days=180 &gt;&gt; /home/mastodon/log/mastodon/all.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>我是直接启动容器执行tootctl命令，更多相关内容可以通过<a href="https://mantyke.icu/2022/mastodon-media-file-cleanup/">使用脚本的tootctl</a>或者<a href="https://www.notion.so/3f645c4a2ab14f34aef37703ee286d3a#d9a3235086fc44ceb3293cf26100a5ae">非docker安装的tootctl</a>了解。</p><p><strong>总结：如果是docker的话，直接对除<code>./public/system/cache</code>以外整个文件夹和个别配置文件进行备份即可。</strong></p><h2 id="Where：备份放在哪里"><a href="#Where：备份放在哪里" class="headerlink" title="Where：备份放在哪里"></a>Where：备份放在哪里</h2><h3 id="本地备份"><a href="#本地备份" class="headerlink" title="本地备份"></a>本地备份</h3><p>本文将备份文件和备份脚本都放在<code>/opt/mastodon-backup</code> 下，你也可以选择任何你喜欢的安全位置。</p><h3 id="异地备份"><a href="#异地备份" class="headerlink" title="异地备份"></a>异地备份</h3><p>最好的备份一定是异地备份。<a href="https://pullopen.github.io/%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/2020/10/19/Mastodon-on-Docker.html#%E5%88%A9%E7%94%A8scaleway%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93">pullopen</a> 和 <a href="https://www.notion.so/0f154999939e44109a5827e6c542fb53">o3o</a> 都推荐了Scaleway云备份，并附上了详细的资料。</p><h2 id="When：什么时候备份"><a href="#When：什么时候备份" class="headerlink" title="When：什么时候备份"></a>When：什么时候备份</h2><p>建议设置每天晚上自动备份一次，可以使用crontab创建定时任务。</p><h2 id="Who：谁来备份"><a href="#Who：谁来备份" class="headerlink" title="Who：谁来备份"></a>Who：谁来备份</h2><p>当然是站长啊还有谁！</p><h2 id="How：如何备份"><a href="#How：如何备份" class="headerlink" title="How：如何备份"></a>How：如何备份</h2><p>啰嗦了这么久终于到了这一步，我只是希望在我真正操作之前能够明白我在做什么。</p><p>这一节脚本主要参考<a href="https://pullopen.github.io/%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/2020/10/19/Mastodon-on-Docker.html#%E5%88%A9%E7%94%A8scaleway%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93">利用Scaleway备份数据库</a> 。</p><h3 id="本地备份-1"><a href="#本地备份-1" class="headerlink" title="本地备份"></a>本地备份</h3><p>只看脚本的前半部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">source /etc/profile</span><br><span class="line">now=$(date &quot;+%Y%m%d-%H%M%S&quot;)</span><br><span class="line">origin=&quot;/home/mastodon/mastodon&quot;</span><br><span class="line">target=&quot;scaleway:你的bucket名字&quot;</span><br><span class="line">echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` &quot; now starting export&quot;</span><br><span class="line">/usr/bin/docker exec pg容器名 pg_dump -U postgres -Fc mastodon_production &gt; $&#123;origin&#125;/backup.dump &amp;&amp;</span><br><span class="line">echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` &quot; succeed and upload to s3 now&quot;</span><br><span class="line">/usr/bin/zip -P 密码 $&#123;origin&#125;/backup_$&#123;now&#125;.zip $&#123;origin&#125;/backup.dump</span><br></pre></td></tr></table></figure><p>前面定义了一些路径和时间等，先通过<code>pg_dump</code>导出<code>backup.dump</code>，再将其加密压缩为<code>backup_$&#123;now&#125;.zip</code>，但从上文可见，对于docker安装的情况，直接copy文件夹即可，所以我对这部分做了一些改动并参考<a href="https://www.notion.so/0f154999939e44109a5827e6c542fb53#59063f5382174e638fc529602d810d32">o3o的配置备份脚本</a>，增加了一些关键信息的备份，我的完整<strong>本地备份</strong>脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># Save this file at  /opt/mastodon-backup/backup_local.sh</span><br><span class="line"># Set a cronjob:  0 5 * * * root /bin/bash /opt/mastodon-backup/backup_local.sh &gt;&gt; /opt/mastodon-backup/logs/backup_local.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"># Set backup_folder and name</span><br><span class="line">now=$(date &quot;+%Y%m%d-%H%M%S&quot;)</span><br><span class="line">origin_folder=&quot;/home/mastodon/mastodon&quot;</span><br><span class="line">backup_folder=&quot;/opt/mastodon-backup/dbbackup&quot;</span><br><span class="line"></span><br><span class="line"># Clean up old backup file</span><br><span class="line">rm -r $&#123;backup_folder&#125;/*</span><br><span class="line"></span><br><span class="line"># Generating a mastodon backup exclude cache</span><br><span class="line">echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` &quot; now starting export&quot;</span><br><span class="line">/usr/bin/zip -P 密码 -rqx=$&#123;origin_folder&#125;/public/system/cache/* $&#123;backup_folder&#125;/backup_$&#123;now&#125;.zip $&#123;origin_folder&#125;</span><br><span class="line"></span><br><span class="line"># Copying important files</span><br><span class="line">cp -r /etc/nginx/sites-available $&#123;backup_folder&#125;</span><br><span class="line">echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` &quot; done!&quot;</span><br></pre></td></tr></table></figure><p>可以单独运行一次脚本看看是否正确备份，运行后查看备份目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls /opt/mastodon-backup/dbbackup/ -lh</span><br><span class="line">total 76M</span><br><span class="line">-rw-r--r-- 1 root root  76M Feb 20 00:09 backup_20220220-000931.zip</span><br><span class="line">drwxr-xr-x 2 root root 4.0K Feb 20 00:09 sites-available</span><br></pre></td></tr></table></figure><p>我将这个脚本存为<code>backup_local.sh</code>，在我配置好Scaleway之前守护我的数据，将其放在crontab下定期运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 5 * * * root /bin/bash /opt/mastodon-backup/backup_local.sh.sh &gt;&gt; /opt/mastodon-backup/logs/backup_local.sh.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>备份时间设在清除外部缓存半小时后。</p><h3 id="异地备份-1"><a href="#异地备份-1" class="headerlink" title="异地备份"></a>异地备份</h3><p>再看原脚本的后半部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/rclone copy $&#123;origin&#125;/backup_$&#123;now&#125;.zip $&#123;target&#125; &amp;&amp;</span><br><span class="line">echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` &quot; ok all done&quot;</span><br><span class="line">rm -f $&#123;origin&#125;/backup.dump $&#123;origin&#125;/backup_$&#123;now&#125;.zip</span><br><span class="line">/usr/bin/rclone --min-age 7d  delete $&#123;target&#125;</span><br></pre></td></tr></table></figure><p><code>rclone copy</code>是将压缩后的备份文件按照配置好的设置上传至Scaleway，之后<code>rm -f</code>删除本地的备份文件，最后设置rclone删除大于7天的备份文件。这一步也可以直接在Scaleway删除，参考<a href="https://www.notion.so/0f154999939e44109a5827e6c542fb53#59063f5382174e638fc529602d810d32">循环销毁备份文件</a>。</p><p>在我更改后的脚本，我采取的方法是每次先删除上一次的备份文件，而不是在上传后删除，这样可以在本地和Scaleway都有一个备份。</p><p>Scaleway和<code>rclone</code>的设置可参考<a href="https://pullopen.github.io/%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/2020/10/19/Mastodon-on-Docker.html#%E5%88%A9%E7%94%A8scaleway%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93">利用Scaleway备份数据库</a> ，<a href="https://www.notion.so/0f154999939e44109a5827e6c542fb53">设置定期异地备份长毛象数据库和关键配置</a> ，</p><p>注意，备份的<code>bucket</code>要和媒体存储的分开，并且设为<code>private</code>！！</p><p>可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone ls scaleway:你的bucket名称</span><br></pre></td></tr></table></figure><p>查看bucket里的文件，确认是否正常上传和删除。</p><p>最终我的完整脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># Save this file at  /opt/mastodon-backup/backup.sh</span><br><span class="line"># Set a cronjob:  0 5 * * * root /bin/bash /opt/mastodon-backup/backup.sh &gt;&gt; /opt/mastodon-backup/logs/backup.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"># Loading /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"># Set backup_folder and name</span><br><span class="line">now=$(date &quot;+%Y%m%d-%H%M%S&quot;)</span><br><span class="line">origin_folder=&quot;/home/mastodon/mastodon&quot;</span><br><span class="line">backup_folder=&quot;/opt/mastodon-backup/dbbackup&quot;</span><br><span class="line">target_bucket=&quot;scaleway:你的bucket名称&quot;</span><br><span class="line"></span><br><span class="line"># Clean up old backup file</span><br><span class="line">rm -r $&#123;backup_folder&#125;/*</span><br><span class="line"></span><br><span class="line"># Generating a mastodon backup exclude cache</span><br><span class="line">echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` &quot; now starting export&quot;</span><br><span class="line">/usr/bin/zip -P 密码 -rqx=$&#123;origin_folder&#125;/public/system/cache/* $&#123;backup_folder&#125;/backup_$&#123;now&#125;.zip $&#123;origin_folder&#125;</span><br><span class="line"></span><br><span class="line"># Copying important files</span><br><span class="line">cp -r /etc/nginx/sites-available/ $&#123;backup_folder&#125;</span><br><span class="line">echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` &quot; local backup done!&quot;</span><br><span class="line"></span><br><span class="line"># upload to scaleway</span><br><span class="line">/usr/bin/rclone copy $&#123;backup_folder&#125;/ $&#123;target_bucket&#125; </span><br><span class="line">echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` &quot; ok all done&quot;</span><br><span class="line"></span><br><span class="line"># delete backup longer than 7d</span><br><span class="line">/usr/bin/rclone --min-age 7d  delete $&#123;target_bucket&#125; </span><br></pre></td></tr></table></figure><p>单独运行一遍可以成功后，就可以把<code>crontab</code>中的<code>backup_local.sh</code>改为<code>backup.sh</code>啦！这样你就有了一个：</p><ul><li>本地和scaleway双重备份</li><li>本地保留一天，scaleway保留7天</li><li>包含nginx设置和整个mastodon目录</li></ul><p>的备份啦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;写在前面：&lt;/strong&gt;&lt;br&gt;本文备份方法我还在验证中，请谨慎使用，最好以防万一多导出一份&lt;code&gt;backup.dump&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;Why：为什么要备份&quot;&gt;&lt;a href=&quot;#Why：为什么要备份&quot; class=&quot;h</summary>
      
    
    
    
    <category term="Project" scheme="https://tech.konata.co/categories/Project/"/>
    
    
    <category term="Mastodon" scheme="https://tech.konata.co/tags/Mastodon/"/>
    
    <category term="postgres" scheme="https://tech.konata.co/tags/postgres/"/>
    
    <category term="Scaleway" scheme="https://tech.konata.co/tags/Scaleway/"/>
    
  </entry>
  
  <entry>
    <title>Mastodon 建站笔记</title>
    <link href="https://tech.konata.co/2022-02-10-build-a-mastodon/"/>
    <id>https://tech.konata.co/2022-02-10-build-a-mastodon/</id>
    <published>2022-02-09T20:38:33.000Z</published>
    <updated>2022-02-26T16:19:19.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>参考<a href="https://pullopen.github.io/%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/2020/10/19/Mastodon-on-Docker.html">蓝盒子站长的教程</a> ，一直进行到把 docker 和 docker-compose 装好。</p><p>Checklist：</p><ul><li>ssh-key设置并关闭密码登录</li><li>开启防火墙</li><li>域名映射到服务器ip</li><li>安装成功 docker 和 docker-compose</li></ul><h2 id="Postgres-database"><a href="#Postgres-database" class="headerlink" title="Postgres database"></a>Postgres database</h2><p><strong>Update 2022.2.19：</strong></p><p>这一步我已经找到原因了，是因为在原教程中，写的是：</p><blockquote><p>刚才docker-compose.yml文件中，数据库（db）部分的地址为.&#x2F;postgres:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data，因此你的数据库绝对地址为&#x2F;home&#x2F;mastodon&#x2F;mastodon&#x2F;postgres。</p></blockquote><p>然后我发现我wget最新的docker-compose配置，这边已经变成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  - ./postgres14:/var/lib/postgresql/data</span><br></pre></td></tr></table></figure><p>所以我当时按照教程运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name postgres12 -v /home/mastodon/mastodon/postgres:/var/lib/postgresql/data -e   POSTGRES_PASSWORD=设置数据库管理员密码 --rm -d postgres:12.5-alpine</span><br></pre></td></tr></table></figure><p>实际上是在<code>./postgres</code>里操作，但我应该在<code>./postgres14</code>里操作才能真的把数据写进docker。所以这里应该把命令改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name postgres12 -v /home/mastodon/mastodon/postgres14:/var/lib/postgresql/data -e   POSTGRES_PASSWORD=设置数据库管理员密码 --rm -d postgres:12.5-alpine</span><br></pre></td></tr></table></figure><p>或者把docker-compose中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  - ./postgres14:/var/lib/postgresql/data</span><br></pre></td></tr></table></figure><p>改回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  - ./postgres:/var/lib/postgresql/data</span><br></pre></td></tr></table></figure><p>总之目的都是让我们能真的实际操作到postgres的数据并让docker能访问到。</p><p>这里因为我还是按照之前的路径操作，后来直接进入<code>mastodon_db_1</code>才真正写到了<code>./postgres14</code>里，所以我的<code>./postgres</code>实际上是没有用的，我就把整个文件夹删掉了。</p><p><strong>原文：</strong></p><p>在设置mastodon的时候，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose run --<span class="built_in">rm</span> web bundle <span class="built_in">exec</span> rake mastodon:setup</span><br></pre></td></tr></table></figure><p>我在这个地方卡住了非常久，在postgres那里尝试了各种版本教程的排列组合最后的结果都是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Database connection could not be established with this configuration, try again.</span><br><span class="line">FATAL:  role <span class="string">&quot;mastodon&quot;</span> does not exist</span><br></pre></td></tr></table></figure><p>后来我认真看了一下这一步，它的输出是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Starting mastodon_db_1    ... <span class="keyword">done</span></span><br><span class="line">Starting mastodon_redis_1 ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>查看docker container也是这两个docker在跑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker container list -a</span><br><span class="line">CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS                    PORTS     NAMES</span><br><span class="line">bd7debf13a49   redis:6-alpine         <span class="string">&quot;docker-entrypoint.s…&quot;</span>   31 minutes ago   Up 31 minutes (healthy)             mastodon_redis_1</span><br><span class="line">30c6e3b74c40   postgres:12.5-alpine   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   31 minutes ago   Up 31 minutes (healthy)             mastodon_db_1</span><br></pre></td></tr></table></figure><p>于是我尝试把教程中4. 初始化PostgreSQL的这句话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it postgres12 psql -U postgres</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mastodon_db_1 psql -U postgres</span><br></pre></td></tr></table></figure><p>之后再添加mastodon用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE USER mastodon WITH PASSWORD <span class="string">&#x27;your_password&#x27;</span> CREATEDB;</span><br><span class="line">&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>完整操作看起来是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker <span class="built_in">exec</span> -it mastodon_db_1 psql -U postgres</span><br><span class="line">psql (12.5)</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># CREATE USER mastodon WITH PASSWORD &#x27;your_password&#x27; CREATEDB;</span></span><br><span class="line">CREATE ROLE</span><br><span class="line">postgres=<span class="comment"># exit</span></span><br></pre></td></tr></table></figure><p>这时候再运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose run --<span class="built_in">rm</span> web bundle <span class="built_in">exec</span> rake mastodon:setup</span><br></pre></td></tr></table></figure><p>按照下列输出就可以通过验证了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Domain name: example.com</span><br><span class="line"></span><br><span class="line">Single user mode disables registrations and redirects the landing page to your public profile.</span><br><span class="line">Do you want to <span class="built_in">enable</span> single user mode? No</span><br><span class="line"></span><br><span class="line">Are you using Docker to run Mastodon? Yes</span><br><span class="line"></span><br><span class="line">PostgreSQL host: mastodon_db_1</span><br><span class="line">PostgreSQL port: 5432</span><br><span class="line">Name of PostgreSQL database: mastodon</span><br><span class="line">Name of PostgreSQL user: mastodon</span><br><span class="line">Password of PostgreSQL user: （这里写上面你给mastodon设置的your_passwords）</span><br><span class="line">Database configuration works! 🎆</span><br><span class="line"></span><br><span class="line">Redis host: mastodon_redis_1</span><br><span class="line">Redis port: 6379</span><br><span class="line">Redis password: （这里是直接回车，没有密码）</span><br><span class="line">Redis configuration works! 🎆</span><br><span class="line"></span><br><span class="line">Do you want to store uploaded files on the cloud? No</span><br><span class="line"></span><br><span class="line">Do you want to send e-mails from localhost? No</span><br><span class="line">SMTP server: smtp.zoho.eu</span><br><span class="line">SMTP port: 587</span><br><span class="line">SMTP username: 你的zoho管理员邮箱地址</span><br><span class="line">SMTP password: 你的zoho管理员密码</span><br><span class="line">SMTP authentication: plain</span><br><span class="line">SMTP OpenSSL verify mode: none</span><br><span class="line">E-mail address to send e-mails <span class="string">&quot;from&quot;</span>: 你的zoho管理员邮箱地址</span><br><span class="line">Send a <span class="built_in">test</span> e-mail with this configuration right now? no</span><br><span class="line"></span><br><span class="line">This configuration will be written to .env.production</span><br><span class="line">Save configuration? Yes</span><br><span class="line">Below is your configuration, save it to an .env.production file outside Docker:</span><br></pre></td></tr></table></figure><p>把接下来的部分一直到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It is also saved within this container so you can proceed with this wizard.</span><br></pre></td></tr></table></figure><p>两行绿字中间的所有内容都复制下来。</p><p>接下来依然按照蓝盒子教程走，两个问题选yes，输入管理员账号。</p><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>这边又出了问题，按照教程走下来在这一步报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl reload nginx</span><br><span class="line">Job <span class="keyword">for</span> nginx.service failed.</span><br><span class="line">See <span class="string">&quot;systemctl status nginx.service&quot;</span> and <span class="string">&quot;journalctl -xe&quot;</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>查看报错信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nginx -t</span><br><span class="line">nginx: [emerg] no <span class="string">&quot;ssl_certificate&quot;</span> is defined <span class="keyword">for</span> the <span class="string">&quot;listen ... ssl&quot;</span> directive <span class="keyword">in</span> /etc/nginx/sites-enabled/example.com.conf:25</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> failed</span><br></pre></td></tr></table></figure><p>原来是证书没有设置好。这边我把soft link先取消了（否则会报错），运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> /etc/nginx/sites-enabled/example.com.conf</span><br><span class="line">sudo certbot certonly --nginx -d example.com</span><br><span class="line">sudo <span class="built_in">ln</span> -s /etc/nginx/sites-available/example.com.conf /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><p>（这边一定要加 <strong>certonly</strong> 这个参数！我因为这一步debug了一整天）</p><p>然后把example.com.conf 里这两行取消注释（#删掉）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Uncomment these lines once you acquire a certificate:</span><br><span class="line">ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span><br></pre></td></tr></table></figure><p>记得上面的example.com实际上应该是你的域名。</p><p>要确保你的<code>nginx -t</code>没有任何问题，我遇到了warning结果最后真的是那个warning导致的错误，不要忽略warning！</p><p>最后可以通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot renew --dry-run</span><br></pre></td></tr></table></figure><p>测试证书的自动更新是否起效，<code>--dry_run</code>就是仅打印信息，不实际执行。</p><p>这一步很多教程会教你设置定期任务来更新，但实际上certbot是会自动更新的（参考<a href="https://blog.csdn.net/AlistairEd/article/details/113804554">这篇文章</a> ）。</p><p>参考资料：</p><p><a href="https://pullopen.github.io/%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/2020/10/19/Mastodon-on-Docker.html">https://pullopen.github.io/%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/2020/10/19/Mastodon-on-Docker.html</a></p><p><a href="https://gist.github.com/TrillCyborg/84939cd4013ace9960031b803a0590c4">https://gist.github.com/TrillCyborg/84939cd4013ace9960031b803a0590c4</a></p><p><a href="https://peterbabic.dev/blog/running-mastodon-with-docker-compose/">https://peterbabic.dev/blog/running-mastodon-with-docker-compose/</a></p><p><a href="https://www.howtoforge.com/how-to-install-mastodon-social-network-with-docker-on-ubuntu-1804/">https://www.howtoforge.com/how-to-install-mastodon-social-network-with-docker-on-ubuntu-1804/</a></p><p><a href="https://www.alibabacloud.com/blog/how-to-install-mastodon-using-docker-on-alibaba-cloud-ecs_595049">https://www.alibabacloud.com/blog/how-to-install-mastodon-using-docker-on-alibaba-cloud-ecs_595049</a></p><p><a href="https://www.linode.com/docs/guides/install-mastodon-on-ubuntu-2004/">https://www.linode.com/docs/guides/install-mastodon-on-ubuntu-2004/</a></p><p><a href="https://www.notion.so/Mastodon-042a05ee29a048df8b2c1afd49e4c49b">https://www.notion.so/Mastodon-042a05ee29a048df8b2c1afd49e4c49b</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;https://pullope</summary>
      
    
    
    
    <category term="Project" scheme="https://tech.konata.co/categories/Project/"/>
    
    
    <category term="nginx" scheme="https://tech.konata.co/tags/nginx/"/>
    
    <category term="certbot" scheme="https://tech.konata.co/tags/certbot/"/>
    
    <category term="mastodon" scheme="https://tech.konata.co/tags/mastodon/"/>
    
  </entry>
  
  <entry>
    <title>Wordpress 建站笔记</title>
    <link href="https://tech.konata.co/2022-02-09-blog-note/"/>
    <id>https://tech.konata.co/2022-02-09-blog-note/</id>
    <published>2022-02-08T19:05:05.000Z</published>
    <updated>2022-02-21T17:36:10.401Z</updated>
    
    <content type="html"><![CDATA[<p>参考教程： <a href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-docker-compose">https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-docker-compose</a></p><h3 id="Step-1-设置反代"><a href="#Step-1-设置反代" class="headerlink" title="Step 1 设置反代"></a>Step 1 设置反代</h3><p>这一步主要是对nginx进行设置。</p><p>反代是什么？为什么要反代？一般而言例如VPN这样的服务就是正向代理，代理客户端访问各个网站。而反向代理是服务器的代理。 </p><p><code>listen</code>：告诉nginx要监听哪个端口。这步暂时只用了80端口，也就是HTTP用的。之后SSL下来了以后加上443，也就是HTTPS用的。</p><p><code>server_name</code>：域名，这里似乎其实只需要写blog.konata.co就够了？前后只是优先级？</p><p><code>index</code>：网页的index文件，按照优先级排序</p><p><code>root</code>：这个是根目录地址，之后会在dockerfile里mount到这个目录下。</p><h3 id="Step-2-设置环境变量"><a href="#Step-2-设置环境变量" class="headerlink" title="Step 2 设置环境变量"></a>Step 2 设置环境变量</h3><p>这一步主要是把密码用户名加到环境变量里，然后由于涉及敏感信息，所以额外添加了.gitignore和.dockerignore</p><h3 id="Step-3-设置docker-compose"><a href="#Step-3-设置docker-compose" class="headerlink" title="Step 3 设置docker-compose"></a>Step 3 设置docker-compose</h3><p>Docker-compose和dockerfile是两个东西，各自用处见：</p><p><a href="https://www.runoob.com/docker/docker-dockerfile.html">https://www.runoob.com/docker/docker-dockerfile.html</a></p><p><a href="https://www.runoob.com/docker/docker-compose.html">https://www.runoob.com/docker/docker-compose.html</a></p><p>Docker-compose是用来配置容器内服务的。这里依次配置了db（数据库），wordpress，webserver（nginx反代）和certbot（https证书）。</p><p>在services中，每个服务器的image指定了是从哪个镜像启动服务。这里用的都是公开的现成的镜像，所以可以直接启动。</p><p>这一步wordpress用的镜像是image: wordpress:5.1.1-fpm-alpine，版本比较旧，可以替换成<a href="https://hub.docker.com/_/wordpress/">这里</a> 更新的tag，如<code>5.9.0-fpm-alpine</code>，也许就可以解决php版本过老的问题（待确认）。</p><h3 id="Step-4-获取SSL证书"><a href="#Step-4-获取SSL证书" class="headerlink" title="Step 4 获取SSL证书"></a>Step 4 获取SSL证书</h3><p>要用https而不是http，需要获取SSL证书。在上一步已经配置好了certbot，这一步首先启动docker-compose。</p><p><code>docker-compose up</code> 是启动，加上<code>-d</code>是在后台运行。</p><p><code>docker-compose ps</code> 可以检查服务运行情况。</p><p><code>docker-compose exec webserver ls -la /etc/letsencrypt/live</code> 这句话指的是启动webserver的docker然后查看域名是否设置成功。从名字上看似乎用的是Let’s Encrypt的服务。如果设置成功，就可以进入<code>docker-compose.yml</code>把<code>--staging</code>这个调试用的参数改成<code>--force-renewal</code>，重新申请一个正式的证书。</p><p><code>docker-compose up --force-recreate --no-deps certbot</code>  使最新的docker-compose.yml生效。</p><h3 id="Step-5-修改nginx"><a href="#Step-5-修改nginx" class="headerlink" title="Step 5 修改nginx"></a>Step 5 修改nginx</h3><p> 因为已经申请到了SSL证书，现在要返回修改<code>nginx</code>。</p><p>先把<code>webserver</code>服务停了，然后下载<code>certbot</code>的<code>nginx</code>配置文件<code>options-ssl-nginx.conf</code>，删除旧的<code>nginx.conf</code>改成新的<code>nginx.conf</code>，再修改<code>docker-compose.yml</code>里<code>webserver</code>的配置，把<code>443</code>端口添加上去。</p><p><code>docker-compose up --force-recreate --no-deps webserver</code> 使最新的docker-compose.yml生效。</p><h3 id="Step-6-前端安装"><a href="#Step-6-前端安装" class="headerlink" title="Step 6 前端安装"></a>Step 6 前端安装</h3><p> 到这步为止，<code>nginx</code>反代，SSL证书，<code>wordpress</code>，全部都安装好并且在后台运行了。这时候访问域名，就会出现<code>wordpress</code>的安装界面。全程网页操作，简单易懂。</p><h3 id="Step-7-定期更新证书"><a href="#Step-7-定期更新证书" class="headerlink" title="Step 7 定期更新证书"></a>Step 7 定期更新证书</h3><p>因为证书90天内有效，所以要写一个脚本每隔一段时间（小于90天）就重新申请一次证书。脚本内容大概是renew <code>certbot</code>并删除多余镜像，之后把脚本的权限设为可执行。调用<code>crontab</code>来定期运行脚本。</p><p><code>*/5 * * * *</code>是每五分钟运行一次，为了快速出测试结果。</p><p><code>\&gt;&gt; /var/log/cron.log 2&gt;&amp;1</code>是把输出写到log文件里，方便查看。</p><p>确认没有问题以后，改为<code>0 12 * * *</code>，是每12小时更新一次，需要更新得这么频繁吗？</p><p>同时把调试用的参数<code>--dry-run</code>从脚本里删掉。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考教程： &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-docker-compose&quot;&gt;https://www.digitalocean.co</summary>
      
    
    
    
    <category term="Project" scheme="https://tech.konata.co/categories/Project/"/>
    
    
    <category term="nginx" scheme="https://tech.konata.co/tags/nginx/"/>
    
    <category term="certbot" scheme="https://tech.konata.co/tags/certbot/"/>
    
    <category term="wordpress" scheme="https://tech.konata.co/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>解决 docker no space left on device</title>
    <link href="https://tech.konata.co/2021-09-16-docker-no-space/"/>
    <id>https://tech.konata.co/2021-09-16-docker-no-space/</id>
    <published>2021-09-16T07:14:57.000Z</published>
    <updated>2022-02-09T20:46:18.939Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统为 CentOS Linux release 7.2，试过网上的一些方法例如软链接，增加graph路径都没有用，自己摸索找到了配置路径的位置，记录一下。</p><ol><li>使用<code>df -h</code> 查看磁盘状况：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line">Filesystem                    Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1                      99G   91G  3.4G  97% /</span><br><span class="line">/dev/vdb1                     493G   62G  406G  14% /data</span><br><span class="line">overlay                        99G   91G  3.4G  97% /var/lib/docker/overlay2/xxx</span><br></pre></td></tr></table></figure><p>可以看到<code>/var/lib/docker/</code>放满了，可以移到<code>data</code>目录下。</p><p>同时可以先确认一下目前的 docker 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">...</span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="2"><li>清理无用的内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker system prune</span><br></pre></td></tr></table></figure><p>可添加<code>-a</code>清除得更彻底。之后查看磁盘状况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line">Filesystem                    Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1                      99G   83G   12G  88% /</span><br><span class="line">/dev/vdb1                     493G   62G  406G  14% /data</span><br><span class="line">overlay                        99G   83G   12G  88% /var/lib/docker/overlay2/xxx</span><br></pre></td></tr></table></figure><p>有所缓解，但12G依然不够用，需要更改 docker 目录到 <code>/data</code>下。</p><ol start="3"><li>停止docker服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop docker</span><br></pre></td></tr></table></figure><ol start="4"><li>创建新的docker工作目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /data/dockerlib</span><br></pre></td></tr></table></figure><ol start="5"><li>迁移&#x2F;var&#x2F;lib&#x2F;docker</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz /var/lib/docker /data/dockerlib</span><br></pre></td></tr></table></figure><ol start="6"><li>改动配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>在文件中更改</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;data-root&quot;</span>: <span class="string">&quot;/data/dockerlib/docker&quot;,</span></span><br></pre></td></tr></table></figure><ol start="7"><li>重启docker服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"> </span><br><span class="line">systemctl restart docker</span><br><span class="line"> </span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><ol start="8"><li>确认是否配置成功</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">...</span><br><span class="line">Docker Root Dir: /data/dockerlib/docker</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="9"><li>确认 docker 已经成功转移</li></ol><p>修改原 docker 路径名，再进行一些操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mv</span> /var/lib/docker /var/lib/docker_temp</span><br><span class="line">$ docker image list</span><br><span class="line">$ docker container list</span><br></pre></td></tr></table></figure><p>在这一步我发现之前的 container 进去会有问题，但是重启后可以重新进入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop xxx</span><br><span class="line">$ docker start xxx</span><br><span class="line">$ docker <span class="built_in">exec</span> -it xxx /bin/bash</span><br></pre></td></tr></table></figure><p>确认无误后可以删除，为了防止出错可以用一阵子再删</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> -rf /var/lib/docker_temp</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;操作系统为 CentOS Linux release 7.2，试过网上的一些方法例如软链接，增加graph路径都没有用，自己摸索找到了配置路径的位置，记录一下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;df -h&lt;/code&gt; 查看磁盘状况：&lt;/li&gt;
&lt;/ol&gt;
&lt;fi</summary>
      
    
    
    
    <category term="Workshop" scheme="https://tech.konata.co/categories/Workshop/"/>
    
    
    <category term="docker" scheme="https://tech.konata.co/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo + GitHub Page 自建博客</title>
    <link href="https://tech.konata.co/2021-08-08-2021-08-08-build-blog-by-hexo/"/>
    <id>https://tech.konata.co/2021-08-08-2021-08-08-build-blog-by-hexo/</id>
    <published>2021-08-07T20:14:38.000Z</published>
    <updated>2022-02-26T12:16:32.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h1><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/70240127">https://zhuanlan.zhihu.com/p/70240127</a></p><p>官网下载安装node，确认以下命令均可使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>如果出现报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Cannot find module &#x27;hexo&#x27; </span><br></pre></td></tr></table></figure><p>重新安装hexo-util</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -- save-dev hexo-util</span><br></pre></td></tr></table></figure><p>使用Hexo自建博客，Hexo会自动生成静态页面并部署到GitHub repo上，不需要直接git push。而在GitHub repo里也只会有public目录下的内容。与此同时public文件夹在hexo的目录下是在.gitignore里的，所以不要直接push整个目录，这样会导致网页404。</p><p>关于网站信息的修改在<code>_config.yml</code>进行，例如修改标题在Site下。</p><h2 id="修改域名"><a href="#修改域名" class="headerlink" title="修改域名"></a>修改域名</h2><p>主要步骤上面的资料已经很详细了，但关于这段</p><blockquote><p>注：如果你用了 hexo clean 命令删除本地静态资源，CNAME文件也会被删掉，所以你可以在本地生成的public文件夹中直接创建好，再上传。</p></blockquote><p>也许是typo，应该把CNAME文件放在source里，才不会被删。</p><h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><p>本站采用next主题：<a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></p><p>因为hexo是5.0+版本，所以安装主题只需：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure><p>再把_config.yml的theme改成next。但这种安装方法比较新，next的中文文档没有更新，需要参考英文文档进行定制：<a href="https://theme-next.js.org/docs/getting-started/configuration.html">https://theme-next.js.org/docs/getting-started/configuration.html</a> 。</p><p>以改scheme为例，如果按照上面的教程走，那就是npm安装的，运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure><p>然后修改Schemes的部分即可。</p><h1 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate # 生成本地静态文件</span><br><span class="line">$ hexo deploy   # 部署</span><br><span class="line">$ hexo clean   </span><br><span class="line">$ hexo g &amp; hexo d </span><br><span class="line">$ hexo new post &#x27;title&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建页面&quot;&gt;&lt;a href=&quot;#创建页面&quot; class=&quot;headerlink&quot; title=&quot;创建页面&quot;&gt;&lt;/a&gt;创建页面&lt;/h1&gt;&lt;p&gt;参考资料：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/70240127&quot;&gt;https://z</summary>
      
    
    
    
    <category term="Project" scheme="https://tech.konata.co/categories/Project/"/>
    
    
    <category term="Hexo" scheme="https://tech.konata.co/tags/Hexo/"/>
    
    <category term="GitHub" scheme="https://tech.konata.co/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>COMA 环境配置记录</title>
    <link href="https://tech.konata.co/2021-07-23-COMA/"/>
    <id>https://tech.konata.co/2021-07-23-COMA/</id>
    <published>2021-07-22T16:05:35.000Z</published>
    <updated>2022-02-09T20:46:25.615Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/anuragranj/coma">https://github.com/anuragranj/coma</a></p><h2 id="Tensorflow-1-3"><a href="#Tensorflow-1-3" class="headerlink" title="Tensorflow 1.3"></a>Tensorflow 1.3</h2><p>这一步由于tensorflow1的环境非常难配置，使用现成docker，版本对应关系如下：</p><p><a href="https://blog.csdn.net/qq_41936559/article/details/104226333">https://blog.csdn.net/qq_41936559/article/details/104226333</a></p><h2 id="opendr安装"><a href="#opendr安装" class="headerlink" title="opendr安装"></a>opendr安装</h2><p>opendr安装对python3的支持比较麻烦，参考：</p><p><a href="https://www.codenong.com/cs110955392/">https://www.codenong.com/cs110955392/</a></p><h2 id="MPI-IS-x2F-mesh配置"><a href="#MPI-IS-x2F-mesh配置" class="headerlink" title="MPI-IS &#x2F; mesh配置"></a>MPI-IS &#x2F; mesh配置</h2><p><a href="https://github.com/MPI-IS/mesh">https://github.com/MPI-IS/mesh</a></p><p>经常要用到的mesh渲染工具</p><p>配置过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install boost-devel</span><br><span class="line">BOOST_INCLUDE_DIRS=/usr/include/boost make all</span><br><span class="line">make tests</span><br></pre></td></tr></table></figure><p>遇到报错：<br>ImportError: No module named psbody.mesh.mesh<br>但是在python3下import是可以的，后来发现是在make tests时默认是python，而在docker环境下要改成python3，测试通过。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/anuragranj/coma&quot;&gt;https://github.com/anuragranj/coma&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Tensorflow-1-3&quot;&gt;&lt;a href=&quot;#Tensorflow-1-3&quot;</summary>
      
    
    
    
    <category term="Project" scheme="https://tech.konata.co/categories/Project/"/>
    
    
    <category term="COMA" scheme="https://tech.konata.co/tags/COMA/"/>
    
    <category term="opendr" scheme="https://tech.konata.co/tags/opendr/"/>
    
    <category term="Tensorflow" scheme="https://tech.konata.co/tags/Tensorflow/"/>
    
    <category term="MPI-IS" scheme="https://tech.konata.co/tags/MPI-IS/"/>
    
  </entry>
  
  <entry>
    <title>在Mac上操作文件</title>
    <link href="https://tech.konata.co/2021-06-11-mac/"/>
    <id>https://tech.konata.co/2021-06-11-mac/</id>
    <published>2021-06-10T16:04:59.000Z</published>
    <updated>2022-02-09T20:46:30.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h2><p><a href="https://www.jianshu.com/p/627b2d462151">https://www.jianshu.com/p/627b2d462151</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h2 id="安装ffmepg"><a href="#安装ffmepg" class="headerlink" title="安装ffmepg"></a>安装ffmepg</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure><h2 id="安装rename"><a href="#安装rename" class="headerlink" title="安装rename"></a>安装rename</h2><p><a href="https://commandnotfound.cn/linux/1/461/rename-%E5%91%BD%E4%BB%A4">https://commandnotfound.cn/linux/1/461/rename-命令</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install rename</span><br></pre></td></tr></table></figure><h2 id="批量改名"><a href="#批量改名" class="headerlink" title="批量改名"></a>批量改名</h2><p><a href="https://zhuanlan.zhihu.com/p/90829056">https://zhuanlan.zhihu.com/p/90829056</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename &#x27;s/.mp41/.mp4/&#x27; *</span><br></pre></td></tr></table></figure><p>后来发现可以直接多选右键批量改名。</p><h2 id="热插拔修复"><a href="#热插拔修复" class="headerlink" title="热插拔修复"></a>热插拔修复</h2><p><a href="https://www.zhihu.com/question/308406915">https://www.zhihu.com/question/308406915</a><br>打开磁盘工具<br>打开terminal</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">diskutil list</span><br><span class="line">ps aux | grep fsck</span><br><span class="line">sudo pkill -f fsck</span><br></pre></td></tr></table></figure><p>点急救，需要等很久很久</p><h2 id="压缩解压分卷"><a href="#压缩解压分卷" class="headerlink" title="压缩解压分卷"></a>压缩解压分卷</h2><p>压缩：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip test.zip test.doc </span><br></pre></td></tr></table></figure><p>分卷：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -s 50m test.zip --out ziptest </span><br></pre></td></tr></table></figure><p>合卷： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ziptest.z* &gt; test.zip </span><br></pre></td></tr></table></figure><p>解压：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip test.zip</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装homebrew&quot;&gt;&lt;a href=&quot;#安装homebrew&quot; class=&quot;headerlink&quot; title=&quot;安装homebrew&quot;&gt;&lt;/a&gt;安装homebrew&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/627</summary>
      
    
    
    
    <category term="Workshop" scheme="https://tech.konata.co/categories/Workshop/"/>
    
    
    <category term="mac" scheme="https://tech.konata.co/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>大型vscode真香现场</title>
    <link href="https://tech.konata.co/2020-01-16-vscode/"/>
    <id>https://tech.konata.co/2020-01-16-vscode/</id>
    <published>2020-01-15T16:03:29.000Z</published>
    <updated>2022-02-27T08:12:53.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><strong>Update 2022-2-26:</strong><br>增加了更基础的一些<a href="https://s2.loli.net/2022/02/26/w2T56gV8CrDHzne.png">安装配置流程</a></p><p>昨天朋友推荐了vscode以后今天试了一下真的是一见钟情，之前学c++的时候就很喜欢用vs，现在用python而且又是在服务器上跑，一直觉得sublime调试非常不方便。vscode对于以前用习惯vs的人不要太舒服，而且对jupyter notebook的支持意外地好，可以说是综合了好几个我非常爱用的IDE的优点了！</p><h1 id="在vscode中使用python"><a href="#在vscode中使用python" class="headerlink" title="在vscode中使用python"></a>在vscode中使用python</h1><p>这个特别简单，一个官方的教程即可搞定：<a href="https://code.visualstudio.com/docs/python/python-tutorial">python-tutorial</a></p><p>几个注意的点：</p><ul><li>设置语言</li></ul><p>按F1然后搜索“configure display language”，就可以选择和安装语言</p><p><img src="https://upload-images.jianshu.io/upload_images/12583080-c2ba80430dd7d00e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><img src="https://upload-images.jianshu.io/upload_images/12583080-66c6ebcbafa80b66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li>切换python 环境</li></ul><p>左下角这里可以切换版本，非常方便</p><p><img src="https://upload-images.jianshu.io/upload_images/12583080-36a9ffb7f4d5250f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li>安装包</li></ul><p>根据tutorial提示，最好是在虚拟环境下安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">py -3 -m venv .venv</span><br><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process</span><br><span class="line">.venv\scripts\activate</span><br><span class="line">python -m pip install matplotlib</span><br></pre></td></tr></table></figure><h1 id="用vscode远程工作"><a href="#用vscode远程工作" class="headerlink" title="用vscode远程工作"></a>用vscode远程工作</h1><p>这也是我最关心的问题，毕竟我的代码几乎都是在服务器上跑的。</p><p>首先是官方教程：<a href="https://code.visualstudio.com/docs/remote/remote-overview">remote-overview</a>，or more specifically：<a href="https://code.visualstudio.com/docs/remote/ssh">Remote Development using SSH</a></p><p><img src="https://upload-images.jianshu.io/upload_images/12583080-a48b1a7d8bf81ef5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>简单介绍一下，在vscode上用SSH远程工作的大致原理就是，本地vscode只提供UI，所有的工作区和代码之类的全是在远程进行的。但你用起来的体验就像是在本地调代码一样。</p><p>需要特别注意的一点是，python插件要在远程重新安装一次。</p><h2 id="下载remote-development"><a href="#下载remote-development" class="headerlink" title="下载remote development"></a>下载remote development</h2><p>首先在extensions商店搜索“remote development”</p><p><img src="https://upload-images.jianshu.io/upload_images/12583080-1b57d11b1f23682d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="连接remote-machine"><a href="#连接remote-machine" class="headerlink" title="连接remote machine"></a>连接remote machine</h2><p>F1, Remote-SSH: Connect to Host… </p><p><img src="https://upload-images.jianshu.io/upload_images/12583080-2435fc80c6943f5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>这边我选择的是add SSH然后输入<code>username@hostname </code>，之后弹出来的窗口上方会提示是否继续和输入密码，输入密码之后就会连上然后就可以打开文件夹。</p><h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><p>这个有点复杂，单独讲一下，官网见：<a href="https://code.visualstudio.com/docs/remote/troubleshooting#_quick-start-ssh-key">Quick start: SSH key</a>，同时参考了这篇文章：<a href="https://zhuanlan.zhihu.com/p/89662757">使用vscode进行远程炼丹</a>。</p><ol><li>在local打开cmd，输入：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure><p>中途提示输入文件路径和密码，都直接回车。</p><ol start="2"><li>上传公钥</li></ol><p>这边我是直接在服务器新建了&#x2F;.ssh&#x2F;authorized_keys然后手动把id_rsa.pub里的内容复制进去。</p><p>接下来再连接就不需要输入密码了。</p><h2 id="在远程中调试"><a href="#在远程中调试" class="headerlink" title="在远程中调试"></a>在远程中调试</h2><p>首先就是把python插件再安装一次，然后重新连接，这时候会重新也安装一下pylint。</p><h1 id="在vscode里用jupyter-notebook"><a href="#在vscode里用jupyter-notebook" class="headerlink" title="在vscode里用jupyter notebook"></a>在vscode里用jupyter notebook</h1><p>这个我之前想复杂了，其实直接新建一个.ipynb文件，打开并且运行，就会提示你没有装，然后你选择一下安装方式conda&#x2F;pip就可以装好了。</p><h2 id="连接本地的jupyter-notebook"><a href="#连接本地的jupyter-notebook" class="headerlink" title="连接本地的jupyter notebook"></a>连接本地的jupyter notebook</h2><p>用不上，理论上同下</p><h2 id="连接服务器上的jupyter-notebook"><a href="#连接服务器上的jupyter-notebook" class="headerlink" title="连接服务器上的jupyter notebook"></a>连接服务器上的jupyter notebook</h2><p>意外也很容易，在想要的目录上<code>jupyter notebook</code>，出来的链接点进去就可以打开了<br>（之前的坑是用<code>jupyter notebook list</code>，结果出来的目录是home&#x2F;yourname）</p><hr><p>2020年6月12日更新<br>用上述方法做断连就打不开了，需要用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --ip=0.0.0.0 --port=xxxx</span><br></pre></td></tr></table></figure><p>然后在<a href="http://gpu-server-2:xxxx/?token=xxxx里把gpu-server-2换成服务器ip就可以了">http://gpu-server-2:xxxx/?token=xxxx里把gpu-server-2换成服务器ip就可以了</a></p><h1 id="断点调试时设置参数"><a href="#断点调试时设置参数" class="headerlink" title="断点调试时设置参数"></a>断点调试时设置参数</h1><p>可以参考这篇文章：<br><a href="https://blog.csdn.net/u012332816/article/details/80801106">https://blog.csdn.net/u012332816/article/details/80801106</a></p><p>打开Run→Open Configurations，添加“args”，类似这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Python: 当前文件&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;python&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;file&#125;&quot;,</span><br><span class="line">            &quot;console&quot;: &quot;integratedTerminal&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;--arg1&quot;,</span><br><span class="line">                &quot;--arg2&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用VScode连接docker容器"><a href="#用VScode连接docker容器" class="headerlink" title="用VScode连接docker容器"></a>用VScode连接docker容器</h1><p>参考<a href="https://code.visualstudio.com/docs/remote/containers#_quick-start-try-a-development-container">官方文档</a>，需要先配置好免密登陆。</p><p>在本机安装docker，在vscode上安装Remote Development，docker插件。</p><p>接下来要修改vscode 的 docker.host，在Docker插件的设置里打开settings.json，增加一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;docker.host&quot;:&quot;ssh://root@ip:36000&quot;</span><br></pre></td></tr></table></figure><p>点击左下角的远程开发按钮， 选择”Remote-Containers: Attach to Running Container…”，就可以看到可连接的docker container列表。</p><p>之后也可以在远程资源管理器（vscode侧边栏）切换可连接的SSH和containers列表。</p><p>实际测试后，如果在远程terminal直接运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it container_ID /bin/bash</span><br></pre></td></tr></table></figure><p>也可以直接在远程docker列表中看到。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;&lt;strong&gt;Update 2022-2-26:&lt;/strong&gt;&lt;br&gt;增加了更基础的一些&lt;a href=&quot;https://s2.loli.net/2022/02/26/w2T</summary>
      
    
    
    
    <category term="Workshop" scheme="https://tech.konata.co/categories/Workshop/"/>
    
    
    <category term="python" scheme="https://tech.konata.co/tags/python/"/>
    
    <category term="vscode" scheme="https://tech.konata.co/tags/vscode/"/>
    
    <category term="JupyterNotebook" scheme="https://tech.konata.co/tags/JupyterNotebook/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg操作速查</title>
    <link href="https://tech.konata.co/2019-11-28-ffmpeg/"/>
    <id>https://tech.konata.co/2019-11-28-ffmpeg/</id>
    <published>2019-11-28T15:59:36.000Z</published>
    <updated>2022-02-09T20:46:37.513Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="切割音频"><a href="#切割音频" class="headerlink" title="切割音频"></a>切割音频</h2><p>ffmpeg -i zhaoliying.mp3 -vn -acodec copy -ss 00:00:00 -t 00:00:10 zhaoliying_10s.mp3</p><h2 id="切割视频"><a href="#切割视频" class="headerlink" title="切割视频"></a>切割视频</h2><p>ffmpeg -i target_video.mp4 -vcodec copy -acodec copy -ss 00:00:00 -t 00:00:05 target_video_5s.mp4</p><h2 id="加logo"><a href="#加logo" class="headerlink" title="加logo"></a>加logo</h2><p><a href="https://www.jianshu.com/p/a069df10a5fb">用ffmpeg给视频批量加水印</a></p><h2 id="提取音频"><a href="#提取音频" class="headerlink" title="提取音频"></a>提取音频</h2><p>ffmpeg -i target_video_0829_1.mp4 -f mp3 -vn target_video_0829_1.mp3</p><h2 id="改fps"><a href="#改fps" class="headerlink" title="改fps"></a>改fps</h2><p>ffmpeg -i “target_video_0829_1.mp4” -r 29.97 -b:v 10M “target_video_0829_1_fps2997.mp4”</p><h2 id="拼接视频"><a href="#拼接视频" class="headerlink" title="拼接视频"></a>拼接视频</h2><p>ffmpeg -i input1.mp4 -i input2.mp4 -filter_complex hstack output.mp4</p><h2 id="图片转视频"><a href="#图片转视频" class="headerlink" title="图片转视频"></a>图片转视频</h2><p>ffmpeg -f image2 -i %d.png  -vcodec libx264 -r 29.97 -b:v 10M  tt.mp4</p><h2 id="旋转视频"><a href="#旋转视频" class="headerlink" title="旋转视频"></a>旋转视频</h2><p>ffmpeg -i input.mp4 -vf “transpose&#x3D;1” output.mp4</p><h2 id="拼接音频"><a href="#拼接音频" class="headerlink" title="拼接音频"></a>拼接音频</h2><p>sox 1.mp3 2.mp3 out.mp3</p><p>这边是发现ffmpeg拼不起来，然后用sox发现报错是<img src="https://upload-images.jianshu.io/upload_images/12583080-6cb124c9cafb069e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>所以要调整一下sample-rate和channels<br>ffmpeg -i 1.mp3 -ac 1 -ar 16000 out1.mp3</p><h2 id="改音频为16K"><a href="#改音频为16K" class="headerlink" title="改音频为16K"></a>改音频为16K</h2><p>ffmpeg -i 01.mp3 -acodec pcm_s16le -ac 1 -ar 16000 1.wav</p><h2 id="改视频size"><a href="#改视频size" class="headerlink" title="改视频size"></a>改视频size</h2><p>ffmpeg -i ziyi_C049_bg_4K.mp4 -vf scale&#x3D;1920:1080 ziyi_C049_bg_1080p.mp4 -hide_banner</p><h2 id="切割画面"><a href="#切割画面" class="headerlink" title="切割画面"></a>切割画面</h2><p>ffmpeg -i input -vf crop&#x3D;480:480:186:0 output</p><p><a href="https://ask.csdn.net/questions/227737">https://ask.csdn.net/questions/227737</a></p><h2 id="加水印"><a href="#加水印" class="headerlink" title="加水印"></a>加水印</h2><p><code>ffmpeg -i audio_0_1s.avi -vf &quot;movie=logo.png[watermark];[in][watermark] overlay=main_w-overlay_w-10:main_h-overlay_h-10[out] &quot; output.avi</code></p><h2 id="批量处理"><a href="#批量处理" class="headerlink" title="批量处理"></a>批量处理</h2><p>参考：<a href="https://forum.videohelp.com/threads/356314-How-to-batch-convert-multiplex-any-files-with-ffmpeg">How to batch convert&#x2F;multiplex any files with ffmpeg</a><br>改了一个脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for %%a in (&quot;*.*&quot;) do ffmpeg -i &quot;%%a&quot; -vf &quot;movie=logo_L.png[watermark];[in][watermark] overlay=0:0[out] &quot; &quot;newfiles\%%~na.mp4&quot;</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h2 id="在terminal运行脚本"><a href="#在terminal运行脚本" class="headerlink" title="在terminal运行脚本"></a>在terminal运行脚本</h2><p>上面的链接用的是.bat，在linux需要用shell（<a href="http://c.biancheng.net/shell/">shell学习指南</a>）编写脚本。</p><h3 id="在terminal运行-sh脚本"><a href="#在terminal运行-sh脚本" class="headerlink" title="在terminal运行.sh脚本"></a>在terminal运行.sh脚本</h3><p><a href="http://c.biancheng.net/view/739.html">执行Shell脚本（多种方法）</a></p><p>首先新建一个文件test.sh，然后使用bash命令运行：<br><code>$ bash test.sh</code></p><h3 id="运行command"><a href="#运行command" class="headerlink" title="运行command"></a>运行command</h3><p>在测试过程中得知command和script不太一样，用以下command成功了：<br><code>for vid in *.avi; do ffmpeg -i &quot;$vid&quot; -vf &quot;movie=logo_L.png[watermark];[in][watermark] overlay=0:0[out] &quot; &quot;$&#123;vid%.*&#125;_logo.avi&quot;; done</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h2 id=&quot;切割音频&quot;&gt;&lt;a href=&quot;#切割音频&quot; class=&quot;headerlink&quot; title=&quot;切割音频&quot;&gt;&lt;/a&gt;切割音频&lt;/h2&gt;&lt;p&gt;ffmpeg -i zhaol</summary>
      
    
    
    
    <category term="Workshop" scheme="https://tech.konata.co/categories/Workshop/"/>
    
    
    <category term="ffmpeg" scheme="https://tech.konata.co/tags/ffmpeg/"/>
    
    <category term="bash" scheme="https://tech.konata.co/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>Git操作速查</title>
    <link href="https://tech.konata.co/2019-07-12-git/"/>
    <id>https://tech.konata.co/2019-07-12-git/</id>
    <published>2019-07-12T15:56:59.000Z</published>
    <updated>2022-02-26T12:20:16.240Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="舍弃本地修改"><a href="#舍弃本地修改" class="headerlink" title="舍弃本地修改"></a>舍弃本地修改</h1><p><a href="https://www.cnblogs.com/qufanblog/p/7606105.html">git 撤销，放弃本地修改</a></p><ol><li><p>未add时<br><code>git checkout .</code></p></li><li><p>add后，commit前<br><code>git reset HEAD . </code><br>回到1，继续<br><code>git checkout .</code></p></li><li><p>commit后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git reset --hard  commitid </span><br></pre></td></tr></table></figure></li></ol><h1 id="处理git-push文件过大的办法"><a href="#处理git-push文件过大的办法" class="headerlink" title="处理git push文件过大的办法"></a>处理git push文件过大的办法</h1><p>在进行git push的时候，遇到了报错HTTP 413 curl 22 The requested URL returned error: 413 Request Entity Too Large<br><img src="https://upload-images.jianshu.io/upload_images/12583080-b3197ead790b002d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>我觉得可能是因为保存rnn模型的文件夹比较大，就在.gitignore加上了那个目录。（让.gitignore生效的办法：<a href="https://blog.csdn.net/mingjie1212/article/details/51689606">git 修改.gitignore后生效</a>），然后再push还是不行，我不确定是不是因为之前commit的还在。</p><p>这个错误本身搜到的解决方案一般是提高文件传输限制之类的，但是我是希望之前的较大的那个commit不要被push上去。于是我搜到了一个解决方案是用git reset： <a href="https://www.cnblogs.com/NewBigLiang/p/7015887.html">git push 推送大文件失败的处理办法</a>。</p><p>也就是说，下次遇到类似的问题，先用git log查commitid，然后用git reset撤销commit，之后修改.gitignore再使其生效，最后commit&amp;push即可。</p><p>另外，reset也可以用于强制更新本地版本，只需在git pull前运行</p><p><code>git reset --hard</code></p><p>即可</p><h1 id="保持本地仓库和远程同步"><a href="#保持本地仓库和远程同步" class="headerlink" title="保持本地仓库和远程同步"></a>保持本地仓库和远程同步</h1><p>远程仓库，个人fork，和本地仓库的逻辑关系如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12583080-86edb36217c60f6e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>当远程仓库更新时，需要先把更新拉到本地，合并好后再push到个人fork的仓库中。具体流程为：</p><ol><li><p>添加远程仓库到本地remote分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream  http://xxxxxx.git</span><br></pre></td></tr></table></figure></li><li><p>查看当前仓库的远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li><p>fetch 远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream</span><br></pre></td></tr></table></figure></li><li><p>合并 fetch 的分支到本地(此处应该和develop保持一致，故merge develop分支)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge upstream/develop</span><br></pre></td></tr></table></figure></li><li><p>推送本地到远程仓库（自己fork的仓库）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push </span><br></pre></td></tr></table></figure></li></ol><h1 id="更改远程仓库地址"><a href="#更改远程仓库地址" class="headerlink" title="更改远程仓库地址"></a>更改远程仓库地址</h1><p>对于原本就是clone的repo，直接添加链接会报错，需要加一句git remote rm orgin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line">git remote add origin https://xxx.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;init&quot;</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h1 id="提PR"><a href="#提PR" class="headerlink" title="提PR"></a>提PR</h1><ol><li>fork repo A&#x2F;code 到自己的 GitHub，称之为 B&#x2F;code</li><li>clone B&#x2F;code 到本地</li><li>增加 A&#x2F;code 作为本地的远程 upstream：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https://github.com/A/code.git</span><br></pre></td></tr></table></figure></li><li>新建工作分支<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  checkout -b my-dev</span><br></pre></td></tr></table></figure></li><li>进行 add，commit，push 到自己的远程分支 B&#x2F;code<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin my-dev</span><br></pre></td></tr></table></figure></li><li>在 GitHub 上发起 Pull Request，会有分支选择</li></ol><p>这里不清楚为什么要添加 upstream 根本没用到，可能为了之后拉代码方便</p><h1 id="让-gitignore生效"><a href="#让-gitignore生效" class="headerlink" title="让.gitignore生效"></a>让.gitignore生效</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h1 id=&quot;舍弃本地修改&quot;&gt;&lt;a href=&quot;#舍弃本地修改&quot; class=&quot;headerlink&quot; title=&quot;舍弃本地修改&quot;&gt;&lt;/a&gt;舍弃本地修改&lt;/h1&gt;&lt;p&gt;&lt;a href</summary>
      
    
    
    
    <category term="Workshop" scheme="https://tech.konata.co/categories/Workshop/"/>
    
    
    <category term="git" scheme="https://tech.konata.co/tags/git/"/>
    
    <category term="GitHub" scheme="https://tech.konata.co/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>在服务器用conda创建python环境</title>
    <link href="https://tech.konata.co/2019-07-08-conda-create-env/"/>
    <id>https://tech.konata.co/2019-07-08-conda-create-env/</id>
    <published>2019-07-08T15:53:20.000Z</published>
    <updated>2022-02-09T20:45:38.416Z</updated>
    
    <content type="html"><![CDATA[<p>2019年11月27日更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda env export &gt; environment.yml</span><br><span class="line">conda env create -f environment.yml</span><br></pre></td></tr></table></figure><p>可以导出environment配置环境：</p><p><a href="https://datascience.stackexchange.com/questions/24093/how-to-clone-python-working-environment-on-another-machine">https://datascience.stackexchange.com/questions/24093/how-to-clone-python-working-environment-on-another-machine</a></p><p>另外，home&#x2F;xxx&#x2F;.conda&#x2F;pkgs会保存很多安装包，可以通过用<code>conda clean -p</code>删除未使用的的包(<a href="https://segmentfault.com/q/1010000017438362">https://segmentfault.com/q/1010000017438362</a>)</p><p>删除环境：conda remove -n your_env_name –all</p><hr><p><a href="http://know.continuum.io/rs/387-XNW-688/images/conda-cheatsheet.pdf">conda cheatsheet</a></p><p>首先，尝试conda list，提示not command，解决方法：</p><p>在.bashrc 的末尾添加如下一行：</p><p><code>export PATH=/opt/anaconda3/bin/:$PATH</code></p><p>之后conda list，正常。</p><p>创建：</p><p>conda create -n vso python&#x3D;2.7</p><p>激活：</p><p>source activate vso</p><p>然后就可以开始安装需要的package</p><p>pip install imutils</p><p>pip install numpy</p><p>pip install opencv-python：遇到报错：libSM.so.6: cannot open shared object file: No such file or directory，解决方案：<br>（<a href="https://blog.csdn.net/liuyingying0418/article/details/84580254">https://blog.csdn.net/liuyingying0418/article/details/84580254</a>）</p><p>(pip install opencv-python -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a>)</p><p>pip install dlib：安装dlib的时候又出现了cmake报错，用pip install CMake，搞定</p><p>pip install scipy</p><p>pip install matplotlib</p><p>pip install sklearn</p><p>pip install ffmpeg-normalize</p><p>conda install ffmpeg</p><p>conda install -c conda-forge librosa&#x3D;0.6.3</p><p>conda install x264 ffmpeg -c conda-forge（为了用h.264编码，参考：<a href="https://teratail.com/questions/156621">https://teratail.com/questions/156621</a>）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2019年11月27日更新：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="Workshop" scheme="https://tech.konata.co/categories/Workshop/"/>
    
    
    <category term="python" scheme="https://tech.konata.co/tags/python/"/>
    
    <category term="conda" scheme="https://tech.konata.co/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>python实现聚类算法</title>
    <link href="https://tech.konata.co/2019-07-08-kmeans/"/>
    <id>https://tech.konata.co/2019-07-08-kmeans/</id>
    <published>2019-07-07T16:19:34.000Z</published>
    <updated>2022-02-09T20:45:45.399Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="sklearn包中的K-Means算法"><a href="#sklearn包中的K-Means算法" class="headerlink" title="sklearn包中的K-Means算法"></a>sklearn包中的K-Means算法</h1><p>1.  函数：<code>sklearn.cluster.``KMeans</code></p><p>*class *<code>sklearn.cluster.``KMeans</code>(<em>n_clusters&#x3D;8</em>, <em>init&#x3D;’k-means++’</em>, <em>n_init&#x3D;10</em>, <em>max_iter&#x3D;300</em>, <em>tol&#x3D;0.0001</em>, <em>precompute_distances&#x3D;’auto’</em>, <em>verbose&#x3D;0</em>, <em>random_state&#x3D;None</em>, <em>copy_x&#x3D;True</em>, <em>n_jobs&#x3D;None</em>, <em>algorithm&#x3D;’auto’</em>)</p><ol start="2"><li>主要参数</li></ol><p>n_clusters：要进行的分类的个数，即上文中k值，默认是8</p><p>init：‘k-means++’, ‘random’ or an ndarray</p><p>‘k-means ++’：使用k-means++算法，默认选项</p><p>‘random’:从初始质心数据中随机选择k个观察值</p><p>第三个是数组形式的参数</p><p><em>n_init</em>：使用不同的初始化运行算法的次数</p><p>max_iter  ：最大迭代次数。默认300</p><p><em>random_state：</em>设置某个整数使得结果固定</p><p>n_jobs: 设置并行量 （-1表示使用所有CPU）</p><ol start="3"><li>主要属性：</li></ol><p>cluster_centers_ ：集群中心的坐标</p><p>labels_ : 每个点的标签</p><ol start="4"><li>官网示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from sklearn.cluster import KMeans</span><br><span class="line">&gt;&gt;&gt; import numpy as np</span><br><span class="line">&gt;&gt;&gt; X = np.array([[1, 2], [1, 4], [1, 0],</span><br><span class="line">...               [10, 2], [10, 4], [10, 0]])</span><br><span class="line">&gt;&gt;&gt; kmeans = KMeans(n_clusters=2, random_state=0).fit(X)</span><br><span class="line">&gt;&gt;&gt; kmeans.labels_</span><br><span class="line">array([1, 1, 1, 0, 0, 0], dtype=int32)</span><br><span class="line">&gt;&gt;&gt; kmeans.predict([[0, 0], [12, 3]])</span><br><span class="line">array([1, 0], dtype=int32)</span><br><span class="line">&gt;&gt;&gt; kmeans.cluster_centers_</span><br><span class="line">array([[10.,  2.],</span><br><span class="line">       [ 1.,  2.]])</span><br></pre></td></tr></table></figure><p>5.  My code：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.cluster import KMeans</span><br><span class="line">import numpy as np</span><br><span class="line">X = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])</span><br><span class="line">plt.plot(X[:,0],X[:,1],&#x27;x&#x27;)</span><br><span class="line">kmeans = KMeans(n_clusters=2).fit(X)</span><br><span class="line">print(kmeans.labels_)</span><br><span class="line">print(kmeans.predict([[0, 0], [4, 4]]))</span><br><span class="line">print(kmeans.cluster_centers_)</span><br></pre></td></tr></table></figure><h1 id="聚类算法衡量指标"><a href="#聚类算法衡量指标" class="headerlink" title="聚类算法衡量指标"></a>聚类算法衡量指标</h1><p>1.  函数：<code>sklearn.metrics.``silhouette_score</code></p><p><code>sklearn.metrics.``silhouette_score</code>(<em>X</em>, <em>labels</em>, <em>metric&#x3D;’euclidean’</em>, <em>sample_size&#x3D;None</em>, <em>random_state&#x3D;None</em>, **<em>kwds</em>)</p><ol start="2"><li>实例：</li></ol><p><a href="https://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_digits.html#sphx-glr-auto-examples-cluster-plot-kmeans-digits-py">https://scikit-learn.org/stable/auto_examples&#x2F;cluster&#x2F;plot_kmeans_digits.html#sphx-glr-auto-examples-cluster-plot-kmeans-digits-py</a></p><h1 id="sklearn包中的K-Means算法-1"><a href="#sklearn包中的K-Means算法-1" class="headerlink" title="sklearn包中的K-Means算法"></a>sklearn包中的K-Means算法</h1><p>1.  函数：<code>sklearn.mixture.``GaussianMixture</code></p><p><code>sklearn.mixture.``GaussianMixture</code>(<em>n_components&#x3D;1</em>, <em>covariance_type&#x3D;’full’</em>, <em>tol&#x3D;0.001</em>, <em>reg_covar&#x3D;1e-06</em>, <em>max_iter&#x3D;100</em>, <em>n_init&#x3D;1</em>, <em>init_params&#x3D;’kmeans’</em>, <em>weights_init&#x3D;None</em>, <em>means_init&#x3D;None</em>, <em>precisions_init&#x3D;None</em>, <em>random_state&#x3D;None</em>, <em>warm_start&#x3D;False</em>, <em>verbose&#x3D;0</em>, <em>verbose_interval&#x3D;10</em>)</p><ol start="2"><li>实例：</li></ol><p><a href="https://scikit-learn.org/stable/auto_examples/mixture/plot_gmm_covariances.html#sphx-glr-auto-examples-mixture-plot-gmm-covariances-py">https://scikit-learn.org/stable/auto_examples&#x2F;mixture&#x2F;plot_gmm_covariances.html#sphx-glr-auto-examples-mixture-plot-gmm-covariances-py</a></p><p><a href="https://scikit-learn.org/stable/auto_examples/mixture/plot_gmm_selection.html#sphx-glr-auto-examples-mixture-plot-gmm-selection-py">https://scikit-learn.org/stable/auto_examples&#x2F;mixture&#x2F;plot_gmm_selection.html#sphx-glr-auto-examples-mixture-plot-gmm-selection-py</a></p><h2 id="聚类结果可视化"><a href="#聚类结果可视化" class="headerlink" title="聚类结果可视化"></a>聚类结果可视化</h2><p>参考代码：<a href="https://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_digits.html#sphx-glr-auto-examples-cluster-plot-kmeans-digits-py">A demo of K-Means clustering on the handwritten digits data</a><br>直接plot出来点太密集了，所以考虑随机抽取5k个点来plot，参考：<a href="https://blog.csdn.net/zsc201825/article/details/80918450">np.random.randint、np.random.choice、random.sample三种随机函数的用法案例</a><br>结果如下：<br><img src="https://upload-images.jianshu.io/upload_images/12583080-5ace24c52806cac3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="先聚类后PCA"><a href="#先聚类后PCA" class="headerlink" title="先聚类后PCA"></a>先聚类后PCA</h2><p>直接对原始的数据进行聚类，结果如下：<br><img src="https://upload-images.jianshu.io/upload_images/12583080-741759f135d8b287.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="Weighted-k-means"><a href="#Weighted-k-means" class="headerlink" title="Weighted k-means"></a>Weighted k-means</h2><h3 id="第一个方法"><a href="#第一个方法" class="headerlink" title="第一个方法"></a>第一个方法</h3><p><a href="https://towardsdatascience.com/clustering-the-us-population-observation-weighted-k-means-f4d58b370002">Clustering the US population: observation-weighted k-means</a><br><a href="https://github.com/leapingllamas/medium_posts/tree/master/observation_weighted_kmeans">github-observation_weighted_kmeans</a></p><p>这是直接对data加权值，有对应的代码，但是数据结构用的是它自己的project，需要改写。</p><h3 id="第二个方法：weighted-kernel-kmeans"><a href="#第二个方法：weighted-kernel-kmeans" class="headerlink" title="第二个方法：weighted kernel kmeans"></a>第二个方法：weighted kernel kmeans</h3><p><a href="https://www.cnblogs.com/subaiBlog/p/6271315.html">WEIGHTED KERNEL K-MEANS 加权核K均值算法理解及其实现（一）</a><br>上文中提到，[1]中使用了这个方法，这个方法最初在[2]提到。有现成的代码库实现：<br><a href="https://tslearn.readthedocs.io/en/latest/gen_modules/clustering/tslearn.clustering.GlobalAlignmentKernelKMeans.html#tslearn.clustering.GlobalAlignmentKernelKMeans">tslearn.clustering.GlobalAlignmentKernelKMeans</a><br>这个是现成的工具包，若要直接使用可以设置一个最简单的y&#x3D;x的kernel即可。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[1]<a href="https://www.cs.utexas.edu/users/inderjit/public_papers/multilevel_pami.pdf">Weighted Graph Cuts without Eigenvectors:A Multilevel Approach</a></p><p>[2]<a href="http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=00B899D4EBC282CC18487FE587FAD753?doi=10.1.1.140.3081&rep=rep1&type=pdf">Kernel k-means, Spectral Clustering and Normalized Cuts</a></p><h2 id="聚类算法一览"><a href="#聚类算法一览" class="headerlink" title="聚类算法一览"></a>聚类算法一览</h2><p><a href="https://www.cnblogs.com/lc1217/p/6893924.html">https://www.cnblogs.com/lc1217/p/6893924.html</a></p><p><a href="https://www.cnblogs.com/lc1217/p/6908031.html">https://www.cnblogs.com/lc1217/p/6908031.html</a></p><p><a href="https://www.cnblogs.com/lc1217/p/6963687.html">https://www.cnblogs.com/lc1217/p/6963687.html</a></p><h2 id="GMM-vs-K-means"><a href="#GMM-vs-K-means" class="headerlink" title="GMM vs K-means"></a>GMM vs K-means</h2><p><a href="https://www.jianshu.com/p/a4d8fa39c762">https://www.jianshu.com/p/a4d8fa39c762</a></p><p><a href="https://www.jianshu.com/p/13898e68c5c6">https://www.jianshu.com/p/13898e68c5c6</a></p><h2 id="sklearn"><a href="#sklearn" class="headerlink" title="sklearn"></a>sklearn</h2><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html">https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html</a></p><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html">https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html</a></p><p><a href="https://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_digits.html#sphx-glr-auto-examples-cluster-plot-kmeans-digits-py">https://scikit-learn.org/stable/auto_examples&#x2F;cluster&#x2F;plot_kmeans_digits.html#sphx-glr-auto-examples-cluster-plot-kmeans-digits-py</a></p><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.mixture.GaussianMixture.html">https://scikit-learn.org/stable/modules/generated/sklearn.mixture.GaussianMixture.html</a></p><p><a href="https://scikit-learn.org/stable/auto_examples/mixture/plot_gmm_selection.html#sphx-glr-auto-examples-mixture-plot-gmm-selection-py">https://scikit-learn.org/stable/auto_examples&#x2F;mixture&#x2F;plot_gmm_selection.html#sphx-glr-auto-examples-mixture-plot-gmm-selection-py</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h1 id=&quot;sklearn包中的K-Means算法&quot;&gt;&lt;a href=&quot;#sklearn包中的K-Means算法&quot; class=&quot;headerlink&quot; title=&quot;sklearn</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://tech.konata.co/categories/Algorithm/"/>
    
    
    <category term="python" scheme="https://tech.konata.co/tags/python/"/>
    
    <category term="scikit-learn" scheme="https://tech.konata.co/tags/scikit-learn/"/>
    
    <category term="kmeans" scheme="https://tech.konata.co/tags/kmeans/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn使用PCA降维小结</title>
    <link href="https://tech.konata.co/2018-11-30-pca/"/>
    <id>https://tech.konata.co/2018-11-30-pca/</id>
    <published>2018-11-29T16:19:38.000Z</published>
    <updated>2022-02-09T20:45:31.011Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>本文在 <a href="http://www.cnblogs.com/pinard/p/6239403.html">http://www.cnblogs.com/pinard/p/6239403.html</a> 和 <a href="https://www.cnblogs.com/pinard/p/6243025.html">https://www.cnblogs.com/pinard/p/6243025.html</a> 的内容基础上做了一些笔记和补充，强调了我认为重要的部分，其中一些细节不再赘述。</p><p>Jupiter notebook版本参见我的github: </p><p><a href="https://github.com/konatasick/machine_learning_note/blob/master/pca.ipynb">https://github.com/konatasick/machine_learning_note/blob/master/pca.ipynb</a></p><h2 id="PCA的思想"><a href="#PCA的思想" class="headerlink" title="PCA的思想"></a>PCA的思想</h2><p>PCA（Principal components analysis，主成分分析）是一种降维算法，它通过使样本间方差尽量大来尽可能保留原始数据的相关关系。</p><h2 id="PCA的算法"><a href="#PCA的算法" class="headerlink" title="PCA的算法"></a>PCA的算法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1) 对所有的样本进行中心化</span><br><span class="line"></span><br><span class="line">2) 计算样本的协方差矩阵</span><br><span class="line"></span><br><span class="line">3) 对协方差矩阵进行特征值分解</span><br><span class="line"></span><br><span class="line">4）取出最大的m个特征值对应的特征向量, 将所有的特征向量标准化后，组成特征向量矩阵W。</span><br><span class="line"></span><br><span class="line">5）对样本集中的每一个样本转化为新的样本</span><br></pre></td></tr></table></figure><h2 id="scikit-learn的sklearn-decomposition-PCA参数介绍"><a href="#scikit-learn的sklearn-decomposition-PCA参数介绍" class="headerlink" title="scikit-learn的sklearn.decomposition.PCA参数介绍"></a>scikit-learn的sklearn.decomposition.PCA参数介绍</h2><p>官方文档：<a href="https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html">https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html</a></p><p>Parameters:</p><p>n_components：这个代表了需要降维的维度。当它是整数时，代表了保留的维度数量。当它是一个介于0~1之间的数时，代表了主成分的方差所占的最小比例，例如0.95代表取超过95%的量的维度。当它为’mle’;，同时svd_solver &#x3D;&#x3D; ‘full’;时，系统会根据MLE算法自动选择维度。（此时svd_solver &#x3D;&#x3D; ‘auto’;将会被解读为svd_solver &#x3D;&#x3D; ‘full’;）</p><p>svd_solver：默认是’auto’;，即在剩下的’full’;, ‘arpack’;, ‘randomized’;中根据情况选一个。’full’;是传统的PCA，’arpack’;, ‘randomized’;适用于数据量大的场景，其区别在于前者是通过scipy.sparse.linalg.svds实现。</p><p>Attributes*:</p><p>components_ : 主成分的投影坐标，代表了数据的最大方差的方向，根据explained_variance_由大到小排列。维度是m*n，其中n是原始数据的维度，m是降维后的维度。</p><p>explained_variance_和explained_variance_ratio_：前者是每一维的方差，后者是所占比例：</p><p>explained_variance_ratio_&#x3D;explained_variance&#x2F;sum（explained_variance_）</p><p>维度是m, 当m&#x3D;n时，sum（explained_variance_ratio_）&#x3D;1。</p><p>mean_：每个feature的平均值。在pca算法的第一步，需要对feature归一化，此时的平均值保留在这里。</p><p>n_components_：模型实际的降维数，即m。</p><h2 id="PCA实例"><a href="#PCA实例" class="headerlink" title="PCA实例"></a>PCA实例</h2><p><a href="https://www.cnblogs.com/pinard/p/6243025.html">https://www.cnblogs.com/pinard/p/6243025.html</a> 中示范了降维的操作。</p><p>首先我们生成随机数据并可视化，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from mpl_toolkits.mplot3d import Axes3D</span><br><span class="line">%matplotlib inline</span><br><span class="line">from sklearn.datasets.samples_generator import make_blobs</span><br><span class="line"># X为样本特征，Y为样本簇类别， 共1000个样本，每个样本3个特征，共4个簇</span><br><span class="line">X, y = make_blobs(n_samples=10000, n_features=3, centers=[[3,3, 3], [0,0,0], [1,1,1], [2,2,2]], cluster_std=[0.2, 0.1, 0.2, 0.2], </span><br><span class="line">                  random_state =9)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig, rect=[0, 0, 1, 1], elev=30, azim=20)</span><br><span class="line">plt.scatter(X[:, 0], X[:, 1], X[:, 2],marker=&#x27;o&#x27;)</span><br></pre></td></tr></table></figure><p>输出如图：</p><p><img src="https://img2018.cnblogs.com/blog/1550156/201811/1550156-20181130104731303-1636187054.png"></p><p>现在我们来进行降维，从3维降到2维，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.decomposition import PCA</span><br><span class="line">pca = PCA(n_components=2)</span><br><span class="line">pca.fit(X)</span><br><span class="line">X_new = pca.transform(X)</span><br><span class="line">plt.scatter(X_new[:, 0], X_new[:, 1],marker=&#x27;o&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>输出如图：</p><p><img src="https://img2018.cnblogs.com/blog/1550156/201811/1550156-20181130104805898-1186449046.png"></p><p>在很多应用中，当我们将数据降维并用于训练后，训练出来的模型之后的输出也是降维后的数据，需要还原回原始维度。这时候需要将pca算法进行逆运算：</p><p>X_old&#x3D;np.dot(X_new,pca.components_)+pca.mean_</p><p>即将新数据和components_相乘并加上平均值。</p><p>使用上文的例子，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X_old=np.dot(X_new,pca.components_)+pca.mean_</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig, rect=[0, 0, 1, 1], elev=30, azim=20)</span><br><span class="line">plt.scatter(X_old[:, 0], X_old[:, 1], X_old[:, 2],marker=&#x27;o&#x27;)</span><br></pre></td></tr></table></figure><p>输出如图：</p><p><img src="https://img2018.cnblogs.com/blog/1550156/201811/1550156-20181130104849634-1533278071.png"></p><p>可以看到，数据即是投影到最大方差方向但并未进行降维时的样子。</p><p>*parameter的命名后面没有下划线，而attribute的命名后面都有下划线，以此区分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;本文在 &lt;a href=&quot;http://www.cnblogs.com/pinard/p/6239403.html&quot;&gt;http://www.cnblogs.com/pinard/p</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://tech.konata.co/categories/Algorithm/"/>
    
    
    <category term="python" scheme="https://tech.konata.co/tags/python/"/>
    
    <category term="scikit-learn" scheme="https://tech.konata.co/tags/scikit-learn/"/>
    
    <category term="PCA" scheme="https://tech.konata.co/tags/PCA/"/>
    
  </entry>
  
</feed>
